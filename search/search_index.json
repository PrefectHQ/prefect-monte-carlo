{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"prefect-monte-carlo Welcome! A collection of Prefect tasks and flows to interact with Monte Carlo from workflows. Getting Started Python setup Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation . Installation Install prefect-monte-carlo with pip : pip install prefect-monte-carlo Then, register this collection's blocks to view them on Prefect Cloud : prefect block register -m prefect_monte_carlo Note, to use the load method on Blocks, you must already have a block document saved through code or saved through the UI . Write and run a flow Execute a query against the Monte Carlo GraphQL API from prefect import flow from prefect_monte_carlo import execute_graphql_operation from prefect_monte_carlo.credentials import MonteCarloCredentials @flow def example_execute_query (): monte_carlo_credentials = MonteCarloCredentials . load ( \"my-mc-creds\" ) result = execute_graphql_operation ( monte_carlo_credentials = monte_carlo_credentials , operation = \"query getUser { getUser { email firstName lastName }}\" , ) example_execute_query () Create or update Monte Carlo lineage from prefect import flow from prefect.context import get_run_context from prefect_monte_carlo.credentials import MonteCarloCredentials from prefect_monte_carlo.lineage import create_or_update_lineage , MonteCarloLineageNode @flow def monte_carlo_orchestrator (): current_flow_run_name = get_run_context () . flow_run . name source = MonteCarloLineageNode ( node_name = \"source_dataset\" , object_id = \"source_dataset\" , object_type = \"table\" , resource_name = \"some_resource_name\" , tags = [{ \"propertyName\" : \"dataset_owner\" , \"propertyValue\" : \"owner_name\" }], ) destination = MonteCarloLineageNode ( node_name = \"destination_dataset\" , object_id = \"destination_dataset\" , object_type = \"table\" , resource_name = \"some_resource_name\" , tags = [{ \"propertyName\" : \"dataset_owner\" , \"propertyValue\" : \"owner_name\" }], ) # `create_or_update_lineage` is a flow, so this will be a subflow run # `extra_tags` are added to both the `source` and `destination` nodes create_or_update_lineage ( monte_carlo_credentials = MonteCarloCredentials . load ( \"my-mc-creds) source = source , destination = destination , expire_at = datetime . now () + timedelta ( days = 10 ), extra_tags = [{ \"propertyName\" : \"flow_run_name\" , \"propertyValue\" : current_flow_run_name }] ) Conditionally execute a flow based on a Monte Carlo circuit breaker rule from prefect import flow from prefect_monte_carlo.circuit_breakers import skip_if_circuit_breaker_flipped from prefect_monte_carlo.credentials import MonteCarloCredentials @flow @skip_if_circuit_breaker_flipped ( monte_carlo_credentials = MonteCarloCredentials . load ( \"my-mc-creds\" ) rule_uuid = \"7810b1ce-4dee-4f40-b14f-ced65c80aea9\" , ) def conditional_flow (): logger = get_run_logger () logger . info ( \"If you see this, your circuit breaker rule was not breached!\" ) conditional_flow () Resources If you encounter any bugs while using prefect-monte-carlo , feel free to open an issue in the prefect-monte-carlo repository. If you have any questions or issues while using prefect-monte-carlo , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Feel free to \u2b50\ufe0f or watch prefect-monte-carlo for updates too! Development If you'd like to install a version of prefect-monte-carlo for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-monte-carlo.git cd prefect-monte-carlo/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Home"},{"location":"#prefect-monte-carlo","text":"","title":"prefect-monte-carlo"},{"location":"#welcome","text":"A collection of Prefect tasks and flows to interact with Monte Carlo from workflows.","title":"Welcome!"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#python-setup","text":"Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation .","title":"Python setup"},{"location":"#installation","text":"Install prefect-monte-carlo with pip : pip install prefect-monte-carlo Then, register this collection's blocks to view them on Prefect Cloud : prefect block register -m prefect_monte_carlo Note, to use the load method on Blocks, you must already have a block document saved through code or saved through the UI .","title":"Installation"},{"location":"#write-and-run-a-flow","text":"","title":"Write and run a flow"},{"location":"#execute-a-query-against-the-monte-carlo-graphql-api","text":"from prefect import flow from prefect_monte_carlo import execute_graphql_operation from prefect_monte_carlo.credentials import MonteCarloCredentials @flow def example_execute_query (): monte_carlo_credentials = MonteCarloCredentials . load ( \"my-mc-creds\" ) result = execute_graphql_operation ( monte_carlo_credentials = monte_carlo_credentials , operation = \"query getUser { getUser { email firstName lastName }}\" , ) example_execute_query ()","title":"Execute a query against the Monte Carlo GraphQL API"},{"location":"#create-or-update-monte-carlo-lineage","text":"from prefect import flow from prefect.context import get_run_context from prefect_monte_carlo.credentials import MonteCarloCredentials from prefect_monte_carlo.lineage import create_or_update_lineage , MonteCarloLineageNode @flow def monte_carlo_orchestrator (): current_flow_run_name = get_run_context () . flow_run . name source = MonteCarloLineageNode ( node_name = \"source_dataset\" , object_id = \"source_dataset\" , object_type = \"table\" , resource_name = \"some_resource_name\" , tags = [{ \"propertyName\" : \"dataset_owner\" , \"propertyValue\" : \"owner_name\" }], ) destination = MonteCarloLineageNode ( node_name = \"destination_dataset\" , object_id = \"destination_dataset\" , object_type = \"table\" , resource_name = \"some_resource_name\" , tags = [{ \"propertyName\" : \"dataset_owner\" , \"propertyValue\" : \"owner_name\" }], ) # `create_or_update_lineage` is a flow, so this will be a subflow run # `extra_tags` are added to both the `source` and `destination` nodes create_or_update_lineage ( monte_carlo_credentials = MonteCarloCredentials . load ( \"my-mc-creds) source = source , destination = destination , expire_at = datetime . now () + timedelta ( days = 10 ), extra_tags = [{ \"propertyName\" : \"flow_run_name\" , \"propertyValue\" : current_flow_run_name }] )","title":"Create or update Monte Carlo lineage"},{"location":"#conditionally-execute-a-flow-based-on-a-monte-carlo-circuit-breaker-rule","text":"from prefect import flow from prefect_monte_carlo.circuit_breakers import skip_if_circuit_breaker_flipped from prefect_monte_carlo.credentials import MonteCarloCredentials @flow @skip_if_circuit_breaker_flipped ( monte_carlo_credentials = MonteCarloCredentials . load ( \"my-mc-creds\" ) rule_uuid = \"7810b1ce-4dee-4f40-b14f-ced65c80aea9\" , ) def conditional_flow (): logger = get_run_logger () logger . info ( \"If you see this, your circuit breaker rule was not breached!\" ) conditional_flow ()","title":"Conditionally execute a flow based on a Monte Carlo circuit breaker rule"},{"location":"#resources","text":"If you encounter any bugs while using prefect-monte-carlo , feel free to open an issue in the prefect-monte-carlo repository. If you have any questions or issues while using prefect-monte-carlo , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Feel free to \u2b50\ufe0f or watch prefect-monte-carlo for updates too!","title":"Resources"},{"location":"#development","text":"If you'd like to install a version of prefect-monte-carlo for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-monte-carlo.git cd prefect-monte-carlo/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Development"},{"location":"circuit_breakers/","text":"prefect_monte_carlo.circuit_breakers Module for interacting with Monte Carlo circuit breakers / monitor rules. Classes Functions circuit_breaker_is_flipped async A task to check if a Monte Carlo circuit breaker / monitor rule is breached. If rule_name is provided, the task will attempt to fetch the associated rule_uuid from the Monte Carlo GraphQL API and use it to trigger the custom rule. To surface pycarlo CircuitBreakerService polling logs as Prefect logs, use the DEBUG log level when running your flow. Parameters: Name Type Description Default monte_carlo_credentials MonteCarloCredentials The Monte Carlo credentials block used to generate an authenticated GraphQL API client. required rule_uuid Optional [ UUID ] UUID of the rule (custom SQL monitor) to execute. None rule_name Optional [ str ] Name of the rule (custom SQL monitor) to execute. None timeout_in_minutes Optional [ int ] How long to wait for SQL rule run logs. 5 Raises: Type Description ValueError If both (or neither) rule_uuid and rule_name are provided. Returns: Type Description bool True if the rule is breached, False otherwise. Example Check if a rule is breached by UUID: from prefect import flow from prefect.orion.schemas.states import Cancelled from prefect_monte_carlo.circuit_breakers import circuit_breaker_is_flipped @task def do_something_if_not_breached (): pass @flow def conditional_flow (): # we can also pass `rule_name` instead of rule_uuid rule_uuid = \"af6fdb62-7496-4b8b-ba09-38f83a311c17\" # or as a UUID object if circuit_breaker_is_flipped ( monte_carlo_credentials = MonteCarloCredentials . load ( \"monte-carlo-credentials\" ), rule_uuid = rule_uuid ): return Cancelled ( message = \"Monitor rule breached - cancelling flow run.\" ) do_something_if_not_breached () Source code in prefect_monte_carlo/circuit_breakers.py 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 @task async def circuit_breaker_is_flipped ( monte_carlo_credentials : MonteCarloCredentials , rule_uuid : Optional [ UUID ] = None , rule_name : Optional [ str ] = None , timeout_in_minutes : Optional [ int ] = 5 , ) -> bool : \"\"\"A task to check if a Monte Carlo circuit breaker / monitor rule is breached. If `rule_name` is provided, the task will attempt to fetch the associated `rule_uuid` from the Monte Carlo GraphQL API and use it to trigger the custom rule. To surface pycarlo `CircuitBreakerService` polling logs as Prefect logs, use the `DEBUG` log level when running your flow. Args: monte_carlo_credentials: The Monte Carlo credentials block used to generate an authenticated GraphQL API client. rule_uuid: UUID of the rule (custom SQL monitor) to execute. rule_name: Name of the rule (custom SQL monitor) to execute. timeout_in_minutes: How long to wait for SQL rule run logs. Raises: ValueError: If both (or neither) `rule_uuid` and `rule_name` are provided. Returns: `True` if the rule is breached, `False` otherwise. Example: Check if a rule is breached by UUID: ```python from prefect import flow from prefect.orion.schemas.states import Cancelled from prefect_monte_carlo.circuit_breakers import circuit_breaker_is_flipped @task def do_something_if_not_breached(): pass @flow def conditional_flow(): # we can also pass `rule_name` instead of rule_uuid rule_uuid = \"af6fdb62-7496-4b8b-ba09-38f83a311c17\" # or as a UUID object if circuit_breaker_is_flipped( monte_carlo_credentials=MonteCarloCredentials.load( \"monte-carlo-credentials\" ), rule_uuid=rule_uuid ): return Cancelled(message=\"Monitor rule breached - cancelling flow run.\") do_something_if_not_breached() ``` \"\"\" monte_carlo_client = monte_carlo_credentials . get_client () if not ( bool ( rule_uuid ) ^ bool ( rule_name )): raise ValueError ( \"Please provide either `rule_uuid` or `rule_name`, but not both\" ) if rule_uuid : rule_uuid = UUID ( rule_uuid ) else : rule_uuid = await rule_uuid_from_name ( rule_name = rule_name , monte_carlo_credentials = monte_carlo_credentials , ) logger = get_run_logger () circuit_breaker_service = CircuitBreakerService ( mc_client = monte_carlo_client , print_func = logger . debug ) job_execution_uuid = circuit_breaker_service . trigger ( rule_uuid = rule_uuid ) logger . debug ( f \"Triggered rule: { rule_uuid } with job execution UUID: { job_execution_uuid } \" ) try : breaches_count = circuit_breaker_service . poll ( job_execution_uuid = job_execution_uuid , timeout_in_minutes = timeout_in_minutes ) if breaches_count > 0 : logger . info ( f \"Found { breaches_count } breach(es)\" f \" for rule { rule_uuid } during job: { job_execution_uuid } \" f \" - see more details at https://getmontecarlo.com/monitors/ { rule_uuid } \" ) return True logger . info ( f \"Found no breach for rule with uuid: ' { rule_uuid } '.\" ) return False except CircuitBreakerPollException as e : logger . error ( f \"Encountered an error when attempting to get circuit breaker status: { e !r} \" ) raise skip_if_circuit_breaker_flipped Decorator to run a user-defined flow only if a given Monte Carlo monitor rule is not breached. This decorator must be placed between your @flow decorator and the python function that defines your flow. Parameters: Name Type Description Default monte_carlo_credentials MonteCarloCredentials The credentials to use to generate an authenticated Monte Carlo GraphQL client via PyCarlo. required rule_uuid Optional [ UUID ] The UUID of the monitor rule to check. None rule_name Optional [ str ] The name of the monitor rule to check. None Examples: Define a flow that will only run if my_monitor_rule is not breached: from prefect import flow from prefect_monte_carlo.circuit_breakers import skip_if_circuit_breaker_flipped from prefect_monte_carlo.credentials import MonteCarloCredentials # suppose `my_monitor_rule` has a UUID `1123e4567-e89b-12d3-a456-426614174000` @flow @skip_if_circuit_breaker_flipped ( rule_uuid = \"123e4567-e89b-12d3-a456-426614174000\" , monte_carlo_credentials = MonteCarloCredentials . load ( \"my-montecarlo-credentials\" ) ) def my_flow (): print ( \"I will only print if `my_monitor_rule` is not breached.\" ) Reference a rule by name: @flow @skip_if_circuit_breaker_flipped ( rule_name = \"my_monitor_rule\" , monte_carlo_credentials = MonteCarloCredentials . load ( \"my-montecarlo-credentials\" ) ) def my_flow (): print ( \"I will only print if `my_monitor_rule` is not breached.\" ) Source code in prefect_monte_carlo/circuit_breakers.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 def skip_if_circuit_breaker_flipped ( monte_carlo_credentials : MonteCarloCredentials , rule_uuid : Optional [ UUID ] = None , rule_name : Optional [ str ] = None , ): \"\"\"Decorator to run a user-defined flow only if a given Monte Carlo monitor rule is not breached. This decorator must be placed between your `@flow` decorator and the python function that defines your flow. Args: monte_carlo_credentials: The credentials to use to generate an authenticated Monte Carlo GraphQL client via PyCarlo. rule_uuid: The UUID of the monitor rule to check. rule_name: The name of the monitor rule to check. Examples: Define a flow that will only run if `my_monitor_rule` is not breached: ```python from prefect import flow from prefect_monte_carlo.circuit_breakers import skip_if_circuit_breaker_flipped from prefect_monte_carlo.credentials import MonteCarloCredentials # suppose `my_monitor_rule` has a UUID `1123e4567-e89b-12d3-a456-426614174000` @flow @skip_if_circuit_breaker_flipped( rule_uuid=\"123e4567-e89b-12d3-a456-426614174000\", monte_carlo_credentials=MonteCarloCredentials.load(\"my-montecarlo-credentials\") ) def my_flow(): print(\"I will only print if `my_monitor_rule` is not breached.\") ``` Reference a rule by name: ```python @flow @skip_if_circuit_breaker_flipped( rule_name=\"my_monitor_rule\", monte_carlo_credentials=MonteCarloCredentials.load(\"my-montecarlo-credentials\") ) def my_flow(): print(\"I will only print if `my_monitor_rule` is not breached.\") ``` \"\"\" monitor_rule_kwargs = dict ( rule_name = rule_name , rule_uuid = rule_uuid , monte_carlo_credentials = monte_carlo_credentials , ) def decorator ( func ): \"\"\"Layer to catch the function being decorated.\"\"\" if not is_async_fn ( func ): @functools . wraps ( func ) def wrapper ( * args , ** kwargs ): \"\"\"Modified synchronous user-flow to return.\"\"\" if circuit_breaker_is_flipped ( ** monitor_rule_kwargs ): return Cancelled () return func ( * args , ** kwargs ) return wrapper else : @functools . wraps ( func ) async def wrapper ( * args , ** kwargs ): \"\"\"Modified asynchronous user-flow to return.\"\"\" if circuit_breaker_is_flipped ( ** monitor_rule_kwargs ): return Cancelled () return await func ( * args , ** kwargs ) return wrapper return decorator","title":"Circuit Breakers"},{"location":"circuit_breakers/#prefect_monte_carlo.circuit_breakers","text":"Module for interacting with Monte Carlo circuit breakers / monitor rules.","title":"circuit_breakers"},{"location":"circuit_breakers/#prefect_monte_carlo.circuit_breakers-classes","text":"","title":"Classes"},{"location":"circuit_breakers/#prefect_monte_carlo.circuit_breakers-functions","text":"","title":"Functions"},{"location":"circuit_breakers/#prefect_monte_carlo.circuit_breakers.circuit_breaker_is_flipped","text":"A task to check if a Monte Carlo circuit breaker / monitor rule is breached. If rule_name is provided, the task will attempt to fetch the associated rule_uuid from the Monte Carlo GraphQL API and use it to trigger the custom rule. To surface pycarlo CircuitBreakerService polling logs as Prefect logs, use the DEBUG log level when running your flow. Parameters: Name Type Description Default monte_carlo_credentials MonteCarloCredentials The Monte Carlo credentials block used to generate an authenticated GraphQL API client. required rule_uuid Optional [ UUID ] UUID of the rule (custom SQL monitor) to execute. None rule_name Optional [ str ] Name of the rule (custom SQL monitor) to execute. None timeout_in_minutes Optional [ int ] How long to wait for SQL rule run logs. 5 Raises: Type Description ValueError If both (or neither) rule_uuid and rule_name are provided. Returns: Type Description bool True if the rule is breached, False otherwise. Example Check if a rule is breached by UUID: from prefect import flow from prefect.orion.schemas.states import Cancelled from prefect_monte_carlo.circuit_breakers import circuit_breaker_is_flipped @task def do_something_if_not_breached (): pass @flow def conditional_flow (): # we can also pass `rule_name` instead of rule_uuid rule_uuid = \"af6fdb62-7496-4b8b-ba09-38f83a311c17\" # or as a UUID object if circuit_breaker_is_flipped ( monte_carlo_credentials = MonteCarloCredentials . load ( \"monte-carlo-credentials\" ), rule_uuid = rule_uuid ): return Cancelled ( message = \"Monitor rule breached - cancelling flow run.\" ) do_something_if_not_breached () Source code in prefect_monte_carlo/circuit_breakers.py 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 @task async def circuit_breaker_is_flipped ( monte_carlo_credentials : MonteCarloCredentials , rule_uuid : Optional [ UUID ] = None , rule_name : Optional [ str ] = None , timeout_in_minutes : Optional [ int ] = 5 , ) -> bool : \"\"\"A task to check if a Monte Carlo circuit breaker / monitor rule is breached. If `rule_name` is provided, the task will attempt to fetch the associated `rule_uuid` from the Monte Carlo GraphQL API and use it to trigger the custom rule. To surface pycarlo `CircuitBreakerService` polling logs as Prefect logs, use the `DEBUG` log level when running your flow. Args: monte_carlo_credentials: The Monte Carlo credentials block used to generate an authenticated GraphQL API client. rule_uuid: UUID of the rule (custom SQL monitor) to execute. rule_name: Name of the rule (custom SQL monitor) to execute. timeout_in_minutes: How long to wait for SQL rule run logs. Raises: ValueError: If both (or neither) `rule_uuid` and `rule_name` are provided. Returns: `True` if the rule is breached, `False` otherwise. Example: Check if a rule is breached by UUID: ```python from prefect import flow from prefect.orion.schemas.states import Cancelled from prefect_monte_carlo.circuit_breakers import circuit_breaker_is_flipped @task def do_something_if_not_breached(): pass @flow def conditional_flow(): # we can also pass `rule_name` instead of rule_uuid rule_uuid = \"af6fdb62-7496-4b8b-ba09-38f83a311c17\" # or as a UUID object if circuit_breaker_is_flipped( monte_carlo_credentials=MonteCarloCredentials.load( \"monte-carlo-credentials\" ), rule_uuid=rule_uuid ): return Cancelled(message=\"Monitor rule breached - cancelling flow run.\") do_something_if_not_breached() ``` \"\"\" monte_carlo_client = monte_carlo_credentials . get_client () if not ( bool ( rule_uuid ) ^ bool ( rule_name )): raise ValueError ( \"Please provide either `rule_uuid` or `rule_name`, but not both\" ) if rule_uuid : rule_uuid = UUID ( rule_uuid ) else : rule_uuid = await rule_uuid_from_name ( rule_name = rule_name , monte_carlo_credentials = monte_carlo_credentials , ) logger = get_run_logger () circuit_breaker_service = CircuitBreakerService ( mc_client = monte_carlo_client , print_func = logger . debug ) job_execution_uuid = circuit_breaker_service . trigger ( rule_uuid = rule_uuid ) logger . debug ( f \"Triggered rule: { rule_uuid } with job execution UUID: { job_execution_uuid } \" ) try : breaches_count = circuit_breaker_service . poll ( job_execution_uuid = job_execution_uuid , timeout_in_minutes = timeout_in_minutes ) if breaches_count > 0 : logger . info ( f \"Found { breaches_count } breach(es)\" f \" for rule { rule_uuid } during job: { job_execution_uuid } \" f \" - see more details at https://getmontecarlo.com/monitors/ { rule_uuid } \" ) return True logger . info ( f \"Found no breach for rule with uuid: ' { rule_uuid } '.\" ) return False except CircuitBreakerPollException as e : logger . error ( f \"Encountered an error when attempting to get circuit breaker status: { e !r} \" ) raise","title":"circuit_breaker_is_flipped()"},{"location":"circuit_breakers/#prefect_monte_carlo.circuit_breakers.skip_if_circuit_breaker_flipped","text":"Decorator to run a user-defined flow only if a given Monte Carlo monitor rule is not breached. This decorator must be placed between your @flow decorator and the python function that defines your flow. Parameters: Name Type Description Default monte_carlo_credentials MonteCarloCredentials The credentials to use to generate an authenticated Monte Carlo GraphQL client via PyCarlo. required rule_uuid Optional [ UUID ] The UUID of the monitor rule to check. None rule_name Optional [ str ] The name of the monitor rule to check. None Examples: Define a flow that will only run if my_monitor_rule is not breached: from prefect import flow from prefect_monte_carlo.circuit_breakers import skip_if_circuit_breaker_flipped from prefect_monte_carlo.credentials import MonteCarloCredentials # suppose `my_monitor_rule` has a UUID `1123e4567-e89b-12d3-a456-426614174000` @flow @skip_if_circuit_breaker_flipped ( rule_uuid = \"123e4567-e89b-12d3-a456-426614174000\" , monte_carlo_credentials = MonteCarloCredentials . load ( \"my-montecarlo-credentials\" ) ) def my_flow (): print ( \"I will only print if `my_monitor_rule` is not breached.\" ) Reference a rule by name: @flow @skip_if_circuit_breaker_flipped ( rule_name = \"my_monitor_rule\" , monte_carlo_credentials = MonteCarloCredentials . load ( \"my-montecarlo-credentials\" ) ) def my_flow (): print ( \"I will only print if `my_monitor_rule` is not breached.\" ) Source code in prefect_monte_carlo/circuit_breakers.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 def skip_if_circuit_breaker_flipped ( monte_carlo_credentials : MonteCarloCredentials , rule_uuid : Optional [ UUID ] = None , rule_name : Optional [ str ] = None , ): \"\"\"Decorator to run a user-defined flow only if a given Monte Carlo monitor rule is not breached. This decorator must be placed between your `@flow` decorator and the python function that defines your flow. Args: monte_carlo_credentials: The credentials to use to generate an authenticated Monte Carlo GraphQL client via PyCarlo. rule_uuid: The UUID of the monitor rule to check. rule_name: The name of the monitor rule to check. Examples: Define a flow that will only run if `my_monitor_rule` is not breached: ```python from prefect import flow from prefect_monte_carlo.circuit_breakers import skip_if_circuit_breaker_flipped from prefect_monte_carlo.credentials import MonteCarloCredentials # suppose `my_monitor_rule` has a UUID `1123e4567-e89b-12d3-a456-426614174000` @flow @skip_if_circuit_breaker_flipped( rule_uuid=\"123e4567-e89b-12d3-a456-426614174000\", monte_carlo_credentials=MonteCarloCredentials.load(\"my-montecarlo-credentials\") ) def my_flow(): print(\"I will only print if `my_monitor_rule` is not breached.\") ``` Reference a rule by name: ```python @flow @skip_if_circuit_breaker_flipped( rule_name=\"my_monitor_rule\", monte_carlo_credentials=MonteCarloCredentials.load(\"my-montecarlo-credentials\") ) def my_flow(): print(\"I will only print if `my_monitor_rule` is not breached.\") ``` \"\"\" monitor_rule_kwargs = dict ( rule_name = rule_name , rule_uuid = rule_uuid , monte_carlo_credentials = monte_carlo_credentials , ) def decorator ( func ): \"\"\"Layer to catch the function being decorated.\"\"\" if not is_async_fn ( func ): @functools . wraps ( func ) def wrapper ( * args , ** kwargs ): \"\"\"Modified synchronous user-flow to return.\"\"\" if circuit_breaker_is_flipped ( ** monitor_rule_kwargs ): return Cancelled () return func ( * args , ** kwargs ) return wrapper else : @functools . wraps ( func ) async def wrapper ( * args , ** kwargs ): \"\"\"Modified asynchronous user-flow to return.\"\"\" if circuit_breaker_is_flipped ( ** monitor_rule_kwargs ): return Cancelled () return await func ( * args , ** kwargs ) return wrapper return decorator","title":"skip_if_circuit_breaker_flipped()"},{"location":"credentials/","text":"prefect_monte_carlo.credentials Credential classes used to perform authenticated interactions with Monte Carlo Classes MonteCarloCredentials Bases: Block Block used to manage Monte Carlo authentication. Attributes: Name Type Description api_key SecretStr The Monte Carlo API key to authenticate with. api_key_id str The Monte Carlo API key ID to authenticate with. catalog_url Optional [ str ] The URL of the Monte Carlo catalog to use. Example Load stored Monte Carlo credentials: from prefect_monte_carlo.credentials import MonteCarloCredentials montecarlo_credentials_block = MonteCarloCredentials . load ( \"BLOCK_NAME\" ) Source code in prefect_monte_carlo/credentials.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 class MonteCarloCredentials ( Block ): \"\"\" Block used to manage Monte Carlo authentication. Attributes: api_key: The Monte Carlo API key to authenticate with. api_key_id: The Monte Carlo API key ID to authenticate with. catalog_url: The URL of the Monte Carlo catalog to use. Example: Load stored Monte Carlo credentials: ```python from prefect_monte_carlo.credentials import MonteCarloCredentials montecarlo_credentials_block = MonteCarloCredentials.load(\"BLOCK_NAME\") ``` \"\"\" _block_type_name = \"Monte Carlo Credentials\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/5OqrPNRdLMvqZzxo9f6Z25/f920dff0f1201fc014b0b083a6d2fdb1/image.png?h=250\" # noqa api_key : SecretStr = Field ( default =... , title = \"API Key\" , description = \"The token to authenticate with Monte Carlo's GraphQL API.\" , ) api_key_id : str = Field ( default =... , title = \"API Key ID\" , description = \"The ID associated with the Monte Carlo API token.\" , ) catalog_url : Optional [ str ] = Field ( default = \"https://getmontecarlo.com/catalog\" , title = \"Monte Carlo catalog URL\" , description = \"The URL of the Monte Carlo catalog.\" , ) def get_client ( self ) -> Client : \"\"\" Gets an authenticated Monte Carlo GraphQL client via pycarlo. Returns: An authenticated Monte Carlo GraphQL client. Example: Gets an authenticated Monte Carlo GraphQL client. ```python from prefect import flow from prefect_monte_carlo.graphql import execute_graphql_operation from prefect_monte_carlo.credentials import MonteCarloCredentials @flow def example_execute_query(): monte_carlo_credentials = MonteCarloCredentials.load( \"my-montecarlo-credentials\" ) result = execute_graphql_operation( monte_carlo_credentials=monte_carlo_credentials, query=\"query getUser { getUser { email firstName lastName }}\", ) example_execute_query() ``` \"\"\" return Client ( session = Session ( mcd_id = self . api_key_id , mcd_token = self . api_key . get_secret_value (), ) ) Functions get_client Gets an authenticated Monte Carlo GraphQL client via pycarlo. Returns: Type Description Client An authenticated Monte Carlo GraphQL client. Example Gets an authenticated Monte Carlo GraphQL client. from prefect import flow from prefect_monte_carlo.graphql import execute_graphql_operation from prefect_monte_carlo.credentials import MonteCarloCredentials @flow def example_execute_query (): monte_carlo_credentials = MonteCarloCredentials . load ( \"my-montecarlo-credentials\" ) result = execute_graphql_operation ( monte_carlo_credentials = monte_carlo_credentials , query = \"query getUser { getUser { email firstName lastName }}\" , ) example_execute_query () Source code in prefect_monte_carlo/credentials.py 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 def get_client ( self ) -> Client : \"\"\" Gets an authenticated Monte Carlo GraphQL client via pycarlo. Returns: An authenticated Monte Carlo GraphQL client. Example: Gets an authenticated Monte Carlo GraphQL client. ```python from prefect import flow from prefect_monte_carlo.graphql import execute_graphql_operation from prefect_monte_carlo.credentials import MonteCarloCredentials @flow def example_execute_query(): monte_carlo_credentials = MonteCarloCredentials.load( \"my-montecarlo-credentials\" ) result = execute_graphql_operation( monte_carlo_credentials=monte_carlo_credentials, query=\"query getUser { getUser { email firstName lastName }}\", ) example_execute_query() ``` \"\"\" return Client ( session = Session ( mcd_id = self . api_key_id , mcd_token = self . api_key . get_secret_value (), ) )","title":"Credentials"},{"location":"credentials/#prefect_monte_carlo.credentials","text":"Credential classes used to perform authenticated interactions with Monte Carlo","title":"credentials"},{"location":"credentials/#prefect_monte_carlo.credentials-classes","text":"","title":"Classes"},{"location":"credentials/#prefect_monte_carlo.credentials.MonteCarloCredentials","text":"Bases: Block Block used to manage Monte Carlo authentication. Attributes: Name Type Description api_key SecretStr The Monte Carlo API key to authenticate with. api_key_id str The Monte Carlo API key ID to authenticate with. catalog_url Optional [ str ] The URL of the Monte Carlo catalog to use. Example Load stored Monte Carlo credentials: from prefect_monte_carlo.credentials import MonteCarloCredentials montecarlo_credentials_block = MonteCarloCredentials . load ( \"BLOCK_NAME\" ) Source code in prefect_monte_carlo/credentials.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 class MonteCarloCredentials ( Block ): \"\"\" Block used to manage Monte Carlo authentication. Attributes: api_key: The Monte Carlo API key to authenticate with. api_key_id: The Monte Carlo API key ID to authenticate with. catalog_url: The URL of the Monte Carlo catalog to use. Example: Load stored Monte Carlo credentials: ```python from prefect_monte_carlo.credentials import MonteCarloCredentials montecarlo_credentials_block = MonteCarloCredentials.load(\"BLOCK_NAME\") ``` \"\"\" _block_type_name = \"Monte Carlo Credentials\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/5OqrPNRdLMvqZzxo9f6Z25/f920dff0f1201fc014b0b083a6d2fdb1/image.png?h=250\" # noqa api_key : SecretStr = Field ( default =... , title = \"API Key\" , description = \"The token to authenticate with Monte Carlo's GraphQL API.\" , ) api_key_id : str = Field ( default =... , title = \"API Key ID\" , description = \"The ID associated with the Monte Carlo API token.\" , ) catalog_url : Optional [ str ] = Field ( default = \"https://getmontecarlo.com/catalog\" , title = \"Monte Carlo catalog URL\" , description = \"The URL of the Monte Carlo catalog.\" , ) def get_client ( self ) -> Client : \"\"\" Gets an authenticated Monte Carlo GraphQL client via pycarlo. Returns: An authenticated Monte Carlo GraphQL client. Example: Gets an authenticated Monte Carlo GraphQL client. ```python from prefect import flow from prefect_monte_carlo.graphql import execute_graphql_operation from prefect_monte_carlo.credentials import MonteCarloCredentials @flow def example_execute_query(): monte_carlo_credentials = MonteCarloCredentials.load( \"my-montecarlo-credentials\" ) result = execute_graphql_operation( monte_carlo_credentials=monte_carlo_credentials, query=\"query getUser { getUser { email firstName lastName }}\", ) example_execute_query() ``` \"\"\" return Client ( session = Session ( mcd_id = self . api_key_id , mcd_token = self . api_key . get_secret_value (), ) )","title":"MonteCarloCredentials"},{"location":"credentials/#prefect_monte_carlo.credentials.MonteCarloCredentials-functions","text":"","title":"Functions"},{"location":"credentials/#prefect_monte_carlo.credentials.MonteCarloCredentials.get_client","text":"Gets an authenticated Monte Carlo GraphQL client via pycarlo. Returns: Type Description Client An authenticated Monte Carlo GraphQL client. Example Gets an authenticated Monte Carlo GraphQL client. from prefect import flow from prefect_monte_carlo.graphql import execute_graphql_operation from prefect_monte_carlo.credentials import MonteCarloCredentials @flow def example_execute_query (): monte_carlo_credentials = MonteCarloCredentials . load ( \"my-montecarlo-credentials\" ) result = execute_graphql_operation ( monte_carlo_credentials = monte_carlo_credentials , query = \"query getUser { getUser { email firstName lastName }}\" , ) example_execute_query () Source code in prefect_monte_carlo/credentials.py 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 def get_client ( self ) -> Client : \"\"\" Gets an authenticated Monte Carlo GraphQL client via pycarlo. Returns: An authenticated Monte Carlo GraphQL client. Example: Gets an authenticated Monte Carlo GraphQL client. ```python from prefect import flow from prefect_monte_carlo.graphql import execute_graphql_operation from prefect_monte_carlo.credentials import MonteCarloCredentials @flow def example_execute_query(): monte_carlo_credentials = MonteCarloCredentials.load( \"my-montecarlo-credentials\" ) result = execute_graphql_operation( monte_carlo_credentials=monte_carlo_credentials, query=\"query getUser { getUser { email firstName lastName }}\", ) example_execute_query() ``` \"\"\" return Client ( session = Session ( mcd_id = self . api_key_id , mcd_token = self . api_key . get_secret_value (), ) )","title":"get_client()"},{"location":"exceptions/","text":"prefect_monte_carlo.exceptions Module for defining useful Monte Carlo exceptions. Classes MonteCarloIncorrectTagsFormatException Bases: Exception Exception for incorrect tags format Source code in prefect_monte_carlo/exceptions.py 4 5 6 7 class MonteCarloIncorrectTagsFormatException ( Exception ): \"\"\"Exception for incorrect tags format\"\"\" pass","title":"Exceptions"},{"location":"exceptions/#prefect_monte_carlo.exceptions","text":"Module for defining useful Monte Carlo exceptions.","title":"exceptions"},{"location":"exceptions/#prefect_monte_carlo.exceptions-classes","text":"","title":"Classes"},{"location":"exceptions/#prefect_monte_carlo.exceptions.MonteCarloIncorrectTagsFormatException","text":"Bases: Exception Exception for incorrect tags format Source code in prefect_monte_carlo/exceptions.py 4 5 6 7 class MonteCarloIncorrectTagsFormatException ( Exception ): \"\"\"Exception for incorrect tags format\"\"\" pass","title":"MonteCarloIncorrectTagsFormatException"},{"location":"graphql/","text":"prefect_monte_carlo.graphql Module for GraphQL queries and mutations. Classes Functions execute_graphql_operation async Executes a GraphQL operation via the Monte Carlo GraphQL API. Parameters: Name Type Description Default monte_carlo_credentials MonteCarloCredentials Credentials to authenticate with the Monte Carlo GraphQL API. required operation str The GraphQL operation to execute - it can be a valid GraphQL query or mutation. required variables Optional [ Dict ] The variables to pass to the GraphQL operation. None Returns: Type Description box . Box The results of the GraphQL operation as a box.Box object. Example Executes a simple GraphQL query against the Monte Carlo GraphQL API. from prefect import flow from prefect_monte_carlo import execute_graphql_operation from prefect_monte_carlo.credentials import MonteCarloCredentials @flow def example_execute_query (): monte_carlo_credentials = MonteCarloCredentials . load ( \"my-montecarlo-credentials\" ) result = execute_graphql_operation ( monte_carlo_credentials = monte_carlo_credentials , operation = \"query getUser { getUser { email firstName lastName }}\" , ) example_execute_query () Executes a GraphQL query with variables. from prefect import flow from prefect_monte_carlo.credentials import MonteCarloCredentials from prefect_monte_carlo.graphql import execute_graphql_operation mc_creds = MonteCarloCredentials . load ( \"monte-carlo-credentials\" ) query = ''' query getTables($first: Int){ getTables(first: $first) { edges { node { fullTableId } } } } ''' @flow def test_mc (): result = execute_graphql_operation ( monte_carlo_credentials = mc_creds , operation = query , variables = { \"first\" : 10 } ) if __name__ == \"__main__\" : test_mc () Source code in prefect_monte_carlo/graphql.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 @task async def execute_graphql_operation ( monte_carlo_credentials : MonteCarloCredentials , operation : str , variables : Optional [ Dict ] = None , ) -> box . Box : \"\"\" Executes a GraphQL operation via the Monte Carlo GraphQL API. Args: monte_carlo_credentials: Credentials to authenticate with the Monte Carlo GraphQL API. operation: The GraphQL operation to execute - it can be a valid GraphQL query or mutation. variables: The variables to pass to the GraphQL operation. Returns: The results of the GraphQL operation as a `box.Box` object. Example: Executes a simple GraphQL query against the Monte Carlo GraphQL API. ```python from prefect import flow from prefect_monte_carlo import execute_graphql_operation from prefect_monte_carlo.credentials import MonteCarloCredentials @flow def example_execute_query(): monte_carlo_credentials = MonteCarloCredentials.load( \"my-montecarlo-credentials\" ) result = execute_graphql_operation( monte_carlo_credentials=monte_carlo_credentials, operation=\"query getUser { getUser { email firstName lastName }}\", ) example_execute_query() ``` Executes a GraphQL query with variables. ```python from prefect import flow from prefect_monte_carlo.credentials import MonteCarloCredentials from prefect_monte_carlo.graphql import execute_graphql_operation mc_creds = MonteCarloCredentials.load(\"monte-carlo-credentials\") query = ''' query getTables($first: Int){ getTables(first: $first) { edges { node { fullTableId } } } } ''' @flow def test_mc(): result = execute_graphql_operation( monte_carlo_credentials=mc_creds, operation=query, variables={\"first\":10} ) if __name__ == \"__main__\": test_mc() ``` \"\"\" client = monte_carlo_credentials . get_client () return client ( operation , variables = variables )","title":"GraphQL"},{"location":"graphql/#prefect_monte_carlo.graphql","text":"Module for GraphQL queries and mutations.","title":"graphql"},{"location":"graphql/#prefect_monte_carlo.graphql-classes","text":"","title":"Classes"},{"location":"graphql/#prefect_monte_carlo.graphql-functions","text":"","title":"Functions"},{"location":"graphql/#prefect_monte_carlo.graphql.execute_graphql_operation","text":"Executes a GraphQL operation via the Monte Carlo GraphQL API. Parameters: Name Type Description Default monte_carlo_credentials MonteCarloCredentials Credentials to authenticate with the Monte Carlo GraphQL API. required operation str The GraphQL operation to execute - it can be a valid GraphQL query or mutation. required variables Optional [ Dict ] The variables to pass to the GraphQL operation. None Returns: Type Description box . Box The results of the GraphQL operation as a box.Box object. Example Executes a simple GraphQL query against the Monte Carlo GraphQL API. from prefect import flow from prefect_monte_carlo import execute_graphql_operation from prefect_monte_carlo.credentials import MonteCarloCredentials @flow def example_execute_query (): monte_carlo_credentials = MonteCarloCredentials . load ( \"my-montecarlo-credentials\" ) result = execute_graphql_operation ( monte_carlo_credentials = monte_carlo_credentials , operation = \"query getUser { getUser { email firstName lastName }}\" , ) example_execute_query () Executes a GraphQL query with variables. from prefect import flow from prefect_monte_carlo.credentials import MonteCarloCredentials from prefect_monte_carlo.graphql import execute_graphql_operation mc_creds = MonteCarloCredentials . load ( \"monte-carlo-credentials\" ) query = ''' query getTables($first: Int){ getTables(first: $first) { edges { node { fullTableId } } } } ''' @flow def test_mc (): result = execute_graphql_operation ( monte_carlo_credentials = mc_creds , operation = query , variables = { \"first\" : 10 } ) if __name__ == \"__main__\" : test_mc () Source code in prefect_monte_carlo/graphql.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 @task async def execute_graphql_operation ( monte_carlo_credentials : MonteCarloCredentials , operation : str , variables : Optional [ Dict ] = None , ) -> box . Box : \"\"\" Executes a GraphQL operation via the Monte Carlo GraphQL API. Args: monte_carlo_credentials: Credentials to authenticate with the Monte Carlo GraphQL API. operation: The GraphQL operation to execute - it can be a valid GraphQL query or mutation. variables: The variables to pass to the GraphQL operation. Returns: The results of the GraphQL operation as a `box.Box` object. Example: Executes a simple GraphQL query against the Monte Carlo GraphQL API. ```python from prefect import flow from prefect_monte_carlo import execute_graphql_operation from prefect_monte_carlo.credentials import MonteCarloCredentials @flow def example_execute_query(): monte_carlo_credentials = MonteCarloCredentials.load( \"my-montecarlo-credentials\" ) result = execute_graphql_operation( monte_carlo_credentials=monte_carlo_credentials, operation=\"query getUser { getUser { email firstName lastName }}\", ) example_execute_query() ``` Executes a GraphQL query with variables. ```python from prefect import flow from prefect_monte_carlo.credentials import MonteCarloCredentials from prefect_monte_carlo.graphql import execute_graphql_operation mc_creds = MonteCarloCredentials.load(\"monte-carlo-credentials\") query = ''' query getTables($first: Int){ getTables(first: $first) { edges { node { fullTableId } } } } ''' @flow def test_mc(): result = execute_graphql_operation( monte_carlo_credentials=mc_creds, operation=query, variables={\"first\":10} ) if __name__ == \"__main__\": test_mc() ``` \"\"\" client = monte_carlo_credentials . get_client () return client ( operation , variables = variables )","title":"execute_graphql_operation()"},{"location":"lineage/","text":"prefect_monte_carlo.lineage Module to define tasks and flows for interacting with lineage resources. Classes MonteCarloLineageNode Bases: BaseModel Pydantic Model of a Monte Carlo lineage lineage node. Source code in prefect_monte_carlo/lineage.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class MonteCarloLineageNode ( BaseModel ): \"\"\"Pydantic Model of a Monte Carlo lineage lineage node.\"\"\" node_name : str object_id : str resource_name : str object_type : Optional [ str ] = \"table\" tags : Optional [ List [ Dict [ str , str ]]] = None @validator ( \"tags\" ) def valid_tags ( cls , tags ): \"\"\"Validate that tags are in the correct format.\"\"\" validate_tags ( tags ) return tags Functions valid_tags Validate that tags are in the correct format. Source code in prefect_monte_carlo/lineage.py 22 23 24 25 26 @validator ( \"tags\" ) def valid_tags ( cls , tags ): \"\"\"Validate that tags are in the correct format.\"\"\" validate_tags ( tags ) return tags Functions create_or_update_lineage async Task for creating or updating a lineage node for the given source and destination nodes, as well as for creating a lineage edge between those nodes. Parameters: Name Type Description Default monte_carlo_credentials MonteCarloCredentials The Monte Carlo credentials block used to generate an authenticated GraphQL API client via pycarlo. required source MonteCarloLineageNode A source node configuration - expected to include the following keys: node_name , object_id , object_type , resource_name , tags . required destination MonteCarloLineageNode A destination node configuration - expected to include the following keys: node_name , object_id , object_type , resource_name , tags . required expire_at Optional [ datetime ] Date and time indicating when to expire a source-destination edge. None extra_tags Optional [ List ] Optional list of tags to attach to the source and destination node. None Raises: Type Description ValueError If the source or destination node configuration is missing object_id or resource_name . Returns: Type Description str The ID of the lineage edge created or updated. Example Create or update a lineage edge between a source and destination node. from prefect import flow from prefect.context import get_run_context from prefect_monte_carlo.credentials import MonteCarloCredentials from prefect_monte_carlo.lineage import ( create_or_update_lineage , MonteCarloLineageNode ) @flow def monte_carlo_orchestrator (): flow_run_name = get_run_context () . flow_run . name source = MonteCarloLineageNode ( node_name = \"source_dataset\" , object_id = \"source_dataset\" , object_type = \"table\" , resource_name = \"some_resource_name\" , tags = [{ \"propertyName\" : \"dataset_owner\" , \"propertyValue\" : \"owner_name\" }], ) destination = MonteCarloLineageNode ( node_name = \"destination_dataset\" , object_id = \"destination_dataset\" , object_type = \"table\" , resource_name = \"some_resource_name\" , tags = [{ \"propertyName\" : \"dataset_owner\" , \"propertyValue\" : \"owner_name\" }], ) # `create_or_update_lineage` is a flow, so this will be a subflow run # `extra_tags` are added to both the `source` and `destination` nodes create_or_update_lineage ( monte_carlo_credentials = MonteCarloCredentials . load ( \"my-mc-creds) source = source , destination = destination , expire_at = datetime . now () + timedelta ( days = 10 ), extra_tags = [ { \"propertyName\" : \"flow_run_name\" , \"propertyValue\" : flow_run_name } ] ) Source code in prefect_monte_carlo/lineage.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 @flow ( description = \"Create or update a `source` node, `destination` node, and the edge that connects them.\" , # noqa: E501 ) async def create_or_update_lineage ( monte_carlo_credentials : MonteCarloCredentials , source : MonteCarloLineageNode , destination : MonteCarloLineageNode , expire_at : Optional [ datetime ] = None , extra_tags : Optional [ List ] = None , ) -> str : \"\"\"Task for creating or updating a lineage node for the given source and destination nodes, as well as for creating a lineage edge between those nodes. Args: monte_carlo_credentials: The Monte Carlo credentials block used to generate an authenticated GraphQL API client via pycarlo. source: A source node configuration - expected to include the following keys: `node_name`, `object_id`, `object_type`, `resource_name`, `tags`. destination: A destination node configuration - expected to include the following keys: `node_name`, `object_id`, `object_type`, `resource_name`, `tags`. expire_at: Date and time indicating when to expire a source-destination edge. extra_tags: Optional list of tags to attach to the source and destination node. Raises: ValueError: If the source or destination node configuration is missing `object_id` or `resource_name`. Returns: The ID of the lineage edge created or updated. Example: Create or update a lineage edge between a source and destination node. ```python from prefect import flow from prefect.context import get_run_context from prefect_monte_carlo.credentials import MonteCarloCredentials from prefect_monte_carlo.lineage import ( create_or_update_lineage, MonteCarloLineageNode ) @flow def monte_carlo_orchestrator(): flow_run_name = get_run_context().flow_run.name source = MonteCarloLineageNode( node_name=\"source_dataset\", object_id=\"source_dataset\", object_type=\"table\", resource_name=\"some_resource_name\", tags=[{\"propertyName\": \"dataset_owner\", \"propertyValue\": \"owner_name\"}], ) destination = MonteCarloLineageNode( node_name=\"destination_dataset\", object_id=\"destination_dataset\", object_type=\"table\", resource_name=\"some_resource_name\", tags=[{\"propertyName\": \"dataset_owner\", \"propertyValue\": \"owner_name\"}], ) # `create_or_update_lineage` is a flow, so this will be a subflow run # `extra_tags` are added to both the `source` and `destination` nodes create_or_update_lineage( monte_carlo_credentials=MonteCarloCredentials.load(\"my-mc-creds) source=source, destination=destination, expire_at=datetime.now() + timedelta(days=10), extra_tags=[ {\"propertyName\": \"flow_run_name\", \"propertyValue\": flow_run_name} ] ) ``` \"\"\" logger = get_run_logger () if extra_tags : validate_tags ( extra_tags ) source . tags = source . tags + extra_tags if source . tags else extra_tags destination . tags = ( destination . tags + extra_tags if destination . tags else extra_tags ) source_node_mcon = await create_or_update_lineage_node ( monte_carlo_credentials = monte_carlo_credentials , node_name = source . node_name , object_id = source . object_id , object_type = source . object_type , resource_name = source . resource_name , tags = source . tags , ) source_node_url = f \" { monte_carlo_credentials . catalog_url } / { source_node_mcon } /table\" logger . info ( \"Created or updated a source lineage node %s \" , source_node_url ) destination_node_mcon = await create_or_update_lineage_node ( monte_carlo_credentials = monte_carlo_credentials , node_name = destination . node_name , object_id = destination . object_id , object_type = destination . object_type , resource_name = destination . resource_name , tags = destination . tags , ) destination_node_url = ( f \" { monte_carlo_credentials . catalog_url } / { destination_node_mcon } /table\" ) logger . info ( \"Created or updated a destination lineage node %s \" , destination_node_url ) # edge between source and destination nodes edge_id = await create_or_update_lineage_edge ( monte_carlo_credentials = monte_carlo_credentials , source = source , destination = destination , expire_at = expire_at , ) logger . info ( f \"Created or updated a destination lineage edge: { edge_id } \" ) return edge_id create_or_update_lineage_edge async Create or update a Monte Carlo lineage edge via the GraphQL API. Parameters: Name Type Description Default source MonteCarloLineageNode The source node of the lineage edge. required destination MonteCarloLineageNode The destination node of the lineage edge. required monte_carlo_credentials MonteCarloCredentials The Monte Carlo credentials block used to generate an authenticated GraphQL API client via pycarlo. required expire_at Optional [ datetime ] The time at which the lineage edge should expire. If not provided, the lineage edge will expire after 1 day. None Returns: Type Description str The edgeId of the created or updated lineage edge. Example Create a lineage edge between a source table and a destination table: from prefect import flow from prefect_monte_carlo.credentials import MonteCarloCredentials from prefect_monte_carlo.lineage import ( create_or_update_lineage_edge , MonteCarloLineageNode ) source = MonteCarloLineageNode ( node_name = \"example_table_name\" , object_id = \"example_table_name\" , # \"table\" is recommended, but you can use any string, e.g. \"csv_file\" object_type = \"table\" , resource_name = \"name_your_source_system\" , tags = [{ \"propertyName\" : \"key\" , \"propertyValue\" : \"value\" }] ) destination = MonteCarloLineageNode ( node_name = \"db_name:schema_name.table_name\" , object_id = \"db_name:schema_name.table_name\" , object_type = \"table\" , resource_name = \"your_dwh_resource_name\" , tags = [{ \"propertyName\" : \"key\" , \"propertyValue\" : \"value\" }] ) @flow def my_monte_carlo_flow (): create_or_update_lineage_edge ( source = source , destination = destination , monte_carlo_credentials = MonteCarloCredentials . load ( \"my-mc-creds\" ), expire_at = datetime . now () + timedelta ( days = 10 ), ) Source code in prefect_monte_carlo/lineage.py 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 @task ( retries = 2 , retry_delay_seconds = 3 , description = \"Create or update a Monte Carlo lineage edge via the GraphQL API.\" , ) async def create_or_update_lineage_edge ( monte_carlo_credentials : MonteCarloCredentials , source : MonteCarloLineageNode , destination : MonteCarloLineageNode , expire_at : Optional [ datetime ] = None , ) -> str : \"\"\"Create or update a Monte Carlo lineage edge via the GraphQL API. Args: source: The source node of the lineage edge. destination: The destination node of the lineage edge. monte_carlo_credentials: The Monte Carlo credentials block used to generate an authenticated GraphQL API client via pycarlo. expire_at: The time at which the lineage edge should expire. If not provided, the lineage edge will expire after 1 day. Returns: The `edgeId` of the created or updated lineage edge. Example: Create a lineage edge between a source table and a destination table: ```python from prefect import flow from prefect_monte_carlo.credentials import MonteCarloCredentials from prefect_monte_carlo.lineage import ( create_or_update_lineage_edge, MonteCarloLineageNode ) source = MonteCarloLineageNode( node_name=\"example_table_name\", object_id=\"example_table_name\", # \"table\" is recommended, but you can use any string, e.g. \"csv_file\" object_type=\"table\", resource_name=\"name_your_source_system\", tags=[{\"propertyName\": \"key\", \"propertyValue\": \"value\"}] ) destination = MonteCarloLineageNode( node_name=\"db_name:schema_name.table_name\", object_id=\"db_name:schema_name.table_name\", object_type=\"table\", resource_name=\"your_dwh_resource_name\", tags=[{\"propertyName\": \"key\", \"propertyValue\": \"value\"}] ) @flow def my_monte_carlo_flow(): create_or_update_lineage_edge( source=source, destination=destination, monte_carlo_credentials=MonteCarloCredentials.load(\"my-mc-creds\"), expire_at=datetime.now() + timedelta(days=10), ) ``` \"\"\" client = monte_carlo_credentials . get_client () query = \"\"\" mutation($destination_object_id: String!, $destination_object_type: String!, $destination_resource_name: String!, $source_object_id: String!, $source_object_type: String!, $source_resource_name: String!, $expire_at: DateTime) { createOrUpdateLineageEdge( destination: { objectId: $destination_object_id objectType: $destination_object_type resourceName: $destination_resource_name } source: { objectId: $source_object_id objectType: $source_object_type resourceName: $source_resource_name } expireAt: $expire_at ){ edge{ edgeId } } } \"\"\" variables = dict ( destination_object_id = destination . object_id , destination_object_type = destination . object_type , destination_resource_name = destination . resource_name , source_object_id = source . object_id , source_object_type = source . object_type , source_resource_name = source . resource_name , expire_at = expire_at . isoformat () if expire_at else None , ) response = client ( query = query , variables = variables ) edge_id = response [ \"create_or_update_lineage_edge\" ][ \"edge\" ][ \"edge_id\" ] return edge_id create_or_update_lineage_node async Task for creating or updating a lineage node via the Monte Carlo GraphQL API. Parameters: Name Type Description Default monte_carlo_credentials MonteCarloCredentials The Monte Carlo credentials block used to generate. required node_name str The name of the lineage node. required object_id str The object ID of the lineage node. required object_type str The object type of the lineage node. required resource_name str The resource name of the lineage node. required tags Optional [ List [ Dict [ str , str ]]] A list of tags to apply to the lineage node. None Returns: Type Description str The MCON identifying the lineage node. Example Create or update a lineage node from a MonteCarloLineageNode object: from prefect import flow from prefect_monte_carlo.credentials import MonteCarloCredentials from prefect_monte_carlo.lineage import ( create_or_update_lineage_node , MonteCarloLineageNode ) mc_node = MonteCarloLineageNode ( node_name = \"source_node\" , object_id = \"my_source_object_id\" , object_type = \"table\" , resource_name = \"my_source_resource_name\" , tags = [{ \"propertyName\" : \"tag_key\" , \"propertyValue\" : \"tag_value\" }], ) @flow def monte_carlo_lineage_flow (): node_mcon = create_or_update_lineage_node ( monte_carlo_credentials = MonteCarloCredentials . load ( \"my-mc-creds\" ), ** mc_node . dict (), Source code in prefect_monte_carlo/lineage.py 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 @task ( retries = 2 , retry_delay_seconds = 3 , description = \"Create or update a Monte Carlo lineage node via the GraphQL API.\" , ) async def create_or_update_lineage_node ( monte_carlo_credentials : MonteCarloCredentials , node_name : str , object_id : str , object_type : str , resource_name : str , tags : Optional [ List [ Dict [ str , str ]]] = None , ) -> str : \"\"\"Task for creating or updating a lineage node via the Monte Carlo GraphQL API. Args: monte_carlo_credentials: The Monte Carlo credentials block used to generate. node_name: The name of the lineage node. object_id: The object ID of the lineage node. object_type: The object type of the lineage node. resource_name: The resource name of the lineage node. tags: A list of tags to apply to the lineage node. Returns: The MCON identifying the lineage node. Example: Create or update a lineage node from a `MonteCarloLineageNode` object: ```python from prefect import flow from prefect_monte_carlo.credentials import MonteCarloCredentials from prefect_monte_carlo.lineage import ( create_or_update_lineage_node, MonteCarloLineageNode ) mc_node = MonteCarloLineageNode( node_name=\"source_node\", object_id=\"my_source_object_id\", object_type=\"table\", resource_name=\"my_source_resource_name\", tags=[{\"propertyName\": \"tag_key\", \"propertyValue\": \"tag_value\"}], ) @flow def monte_carlo_lineage_flow(): node_mcon = create_or_update_lineage_node( monte_carlo_credentials=MonteCarloCredentials.load(\"my-mc-creds\"), **mc_node.dict(), ``` \"\"\" mc_client = monte_carlo_credentials . get_client () response = mc_client ( query = \"\"\" mutation($node_name: String!, $object_id: String!, $object_type: String!, $resource_name: String!, $tags: [ObjectPropertyInput] ) { createOrUpdateLineageNode( name: $node_name, objectId: $object_id, objectType: $object_type, resourceName: $resource_name, properties: $tags ){ node{ mcon } } } \"\"\" , variables = dict ( node_name = node_name , object_id = object_id , object_type = object_type , resource_name = resource_name , tags = tags , ), ) mcon_string = response [ \"create_or_update_lineage_node\" ][ \"node\" ][ \"mcon\" ] return mcon_string","title":"Lineage"},{"location":"lineage/#prefect_monte_carlo.lineage","text":"Module to define tasks and flows for interacting with lineage resources.","title":"lineage"},{"location":"lineage/#prefect_monte_carlo.lineage-classes","text":"","title":"Classes"},{"location":"lineage/#prefect_monte_carlo.lineage.MonteCarloLineageNode","text":"Bases: BaseModel Pydantic Model of a Monte Carlo lineage lineage node. Source code in prefect_monte_carlo/lineage.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class MonteCarloLineageNode ( BaseModel ): \"\"\"Pydantic Model of a Monte Carlo lineage lineage node.\"\"\" node_name : str object_id : str resource_name : str object_type : Optional [ str ] = \"table\" tags : Optional [ List [ Dict [ str , str ]]] = None @validator ( \"tags\" ) def valid_tags ( cls , tags ): \"\"\"Validate that tags are in the correct format.\"\"\" validate_tags ( tags ) return tags","title":"MonteCarloLineageNode"},{"location":"lineage/#prefect_monte_carlo.lineage.MonteCarloLineageNode-functions","text":"","title":"Functions"},{"location":"lineage/#prefect_monte_carlo.lineage.MonteCarloLineageNode.valid_tags","text":"Validate that tags are in the correct format. Source code in prefect_monte_carlo/lineage.py 22 23 24 25 26 @validator ( \"tags\" ) def valid_tags ( cls , tags ): \"\"\"Validate that tags are in the correct format.\"\"\" validate_tags ( tags ) return tags","title":"valid_tags()"},{"location":"lineage/#prefect_monte_carlo.lineage-functions","text":"","title":"Functions"},{"location":"lineage/#prefect_monte_carlo.lineage.create_or_update_lineage","text":"Task for creating or updating a lineage node for the given source and destination nodes, as well as for creating a lineage edge between those nodes. Parameters: Name Type Description Default monte_carlo_credentials MonteCarloCredentials The Monte Carlo credentials block used to generate an authenticated GraphQL API client via pycarlo. required source MonteCarloLineageNode A source node configuration - expected to include the following keys: node_name , object_id , object_type , resource_name , tags . required destination MonteCarloLineageNode A destination node configuration - expected to include the following keys: node_name , object_id , object_type , resource_name , tags . required expire_at Optional [ datetime ] Date and time indicating when to expire a source-destination edge. None extra_tags Optional [ List ] Optional list of tags to attach to the source and destination node. None Raises: Type Description ValueError If the source or destination node configuration is missing object_id or resource_name . Returns: Type Description str The ID of the lineage edge created or updated. Example Create or update a lineage edge between a source and destination node. from prefect import flow from prefect.context import get_run_context from prefect_monte_carlo.credentials import MonteCarloCredentials from prefect_monte_carlo.lineage import ( create_or_update_lineage , MonteCarloLineageNode ) @flow def monte_carlo_orchestrator (): flow_run_name = get_run_context () . flow_run . name source = MonteCarloLineageNode ( node_name = \"source_dataset\" , object_id = \"source_dataset\" , object_type = \"table\" , resource_name = \"some_resource_name\" , tags = [{ \"propertyName\" : \"dataset_owner\" , \"propertyValue\" : \"owner_name\" }], ) destination = MonteCarloLineageNode ( node_name = \"destination_dataset\" , object_id = \"destination_dataset\" , object_type = \"table\" , resource_name = \"some_resource_name\" , tags = [{ \"propertyName\" : \"dataset_owner\" , \"propertyValue\" : \"owner_name\" }], ) # `create_or_update_lineage` is a flow, so this will be a subflow run # `extra_tags` are added to both the `source` and `destination` nodes create_or_update_lineage ( monte_carlo_credentials = MonteCarloCredentials . load ( \"my-mc-creds) source = source , destination = destination , expire_at = datetime . now () + timedelta ( days = 10 ), extra_tags = [ { \"propertyName\" : \"flow_run_name\" , \"propertyValue\" : flow_run_name } ] ) Source code in prefect_monte_carlo/lineage.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 @flow ( description = \"Create or update a `source` node, `destination` node, and the edge that connects them.\" , # noqa: E501 ) async def create_or_update_lineage ( monte_carlo_credentials : MonteCarloCredentials , source : MonteCarloLineageNode , destination : MonteCarloLineageNode , expire_at : Optional [ datetime ] = None , extra_tags : Optional [ List ] = None , ) -> str : \"\"\"Task for creating or updating a lineage node for the given source and destination nodes, as well as for creating a lineage edge between those nodes. Args: monte_carlo_credentials: The Monte Carlo credentials block used to generate an authenticated GraphQL API client via pycarlo. source: A source node configuration - expected to include the following keys: `node_name`, `object_id`, `object_type`, `resource_name`, `tags`. destination: A destination node configuration - expected to include the following keys: `node_name`, `object_id`, `object_type`, `resource_name`, `tags`. expire_at: Date and time indicating when to expire a source-destination edge. extra_tags: Optional list of tags to attach to the source and destination node. Raises: ValueError: If the source or destination node configuration is missing `object_id` or `resource_name`. Returns: The ID of the lineage edge created or updated. Example: Create or update a lineage edge between a source and destination node. ```python from prefect import flow from prefect.context import get_run_context from prefect_monte_carlo.credentials import MonteCarloCredentials from prefect_monte_carlo.lineage import ( create_or_update_lineage, MonteCarloLineageNode ) @flow def monte_carlo_orchestrator(): flow_run_name = get_run_context().flow_run.name source = MonteCarloLineageNode( node_name=\"source_dataset\", object_id=\"source_dataset\", object_type=\"table\", resource_name=\"some_resource_name\", tags=[{\"propertyName\": \"dataset_owner\", \"propertyValue\": \"owner_name\"}], ) destination = MonteCarloLineageNode( node_name=\"destination_dataset\", object_id=\"destination_dataset\", object_type=\"table\", resource_name=\"some_resource_name\", tags=[{\"propertyName\": \"dataset_owner\", \"propertyValue\": \"owner_name\"}], ) # `create_or_update_lineage` is a flow, so this will be a subflow run # `extra_tags` are added to both the `source` and `destination` nodes create_or_update_lineage( monte_carlo_credentials=MonteCarloCredentials.load(\"my-mc-creds) source=source, destination=destination, expire_at=datetime.now() + timedelta(days=10), extra_tags=[ {\"propertyName\": \"flow_run_name\", \"propertyValue\": flow_run_name} ] ) ``` \"\"\" logger = get_run_logger () if extra_tags : validate_tags ( extra_tags ) source . tags = source . tags + extra_tags if source . tags else extra_tags destination . tags = ( destination . tags + extra_tags if destination . tags else extra_tags ) source_node_mcon = await create_or_update_lineage_node ( monte_carlo_credentials = monte_carlo_credentials , node_name = source . node_name , object_id = source . object_id , object_type = source . object_type , resource_name = source . resource_name , tags = source . tags , ) source_node_url = f \" { monte_carlo_credentials . catalog_url } / { source_node_mcon } /table\" logger . info ( \"Created or updated a source lineage node %s \" , source_node_url ) destination_node_mcon = await create_or_update_lineage_node ( monte_carlo_credentials = monte_carlo_credentials , node_name = destination . node_name , object_id = destination . object_id , object_type = destination . object_type , resource_name = destination . resource_name , tags = destination . tags , ) destination_node_url = ( f \" { monte_carlo_credentials . catalog_url } / { destination_node_mcon } /table\" ) logger . info ( \"Created or updated a destination lineage node %s \" , destination_node_url ) # edge between source and destination nodes edge_id = await create_or_update_lineage_edge ( monte_carlo_credentials = monte_carlo_credentials , source = source , destination = destination , expire_at = expire_at , ) logger . info ( f \"Created or updated a destination lineage edge: { edge_id } \" ) return edge_id","title":"create_or_update_lineage()"},{"location":"lineage/#prefect_monte_carlo.lineage.create_or_update_lineage_edge","text":"Create or update a Monte Carlo lineage edge via the GraphQL API. Parameters: Name Type Description Default source MonteCarloLineageNode The source node of the lineage edge. required destination MonteCarloLineageNode The destination node of the lineage edge. required monte_carlo_credentials MonteCarloCredentials The Monte Carlo credentials block used to generate an authenticated GraphQL API client via pycarlo. required expire_at Optional [ datetime ] The time at which the lineage edge should expire. If not provided, the lineage edge will expire after 1 day. None Returns: Type Description str The edgeId of the created or updated lineage edge. Example Create a lineage edge between a source table and a destination table: from prefect import flow from prefect_monte_carlo.credentials import MonteCarloCredentials from prefect_monte_carlo.lineage import ( create_or_update_lineage_edge , MonteCarloLineageNode ) source = MonteCarloLineageNode ( node_name = \"example_table_name\" , object_id = \"example_table_name\" , # \"table\" is recommended, but you can use any string, e.g. \"csv_file\" object_type = \"table\" , resource_name = \"name_your_source_system\" , tags = [{ \"propertyName\" : \"key\" , \"propertyValue\" : \"value\" }] ) destination = MonteCarloLineageNode ( node_name = \"db_name:schema_name.table_name\" , object_id = \"db_name:schema_name.table_name\" , object_type = \"table\" , resource_name = \"your_dwh_resource_name\" , tags = [{ \"propertyName\" : \"key\" , \"propertyValue\" : \"value\" }] ) @flow def my_monte_carlo_flow (): create_or_update_lineage_edge ( source = source , destination = destination , monte_carlo_credentials = MonteCarloCredentials . load ( \"my-mc-creds\" ), expire_at = datetime . now () + timedelta ( days = 10 ), ) Source code in prefect_monte_carlo/lineage.py 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 @task ( retries = 2 , retry_delay_seconds = 3 , description = \"Create or update a Monte Carlo lineage edge via the GraphQL API.\" , ) async def create_or_update_lineage_edge ( monte_carlo_credentials : MonteCarloCredentials , source : MonteCarloLineageNode , destination : MonteCarloLineageNode , expire_at : Optional [ datetime ] = None , ) -> str : \"\"\"Create or update a Monte Carlo lineage edge via the GraphQL API. Args: source: The source node of the lineage edge. destination: The destination node of the lineage edge. monte_carlo_credentials: The Monte Carlo credentials block used to generate an authenticated GraphQL API client via pycarlo. expire_at: The time at which the lineage edge should expire. If not provided, the lineage edge will expire after 1 day. Returns: The `edgeId` of the created or updated lineage edge. Example: Create a lineage edge between a source table and a destination table: ```python from prefect import flow from prefect_monte_carlo.credentials import MonteCarloCredentials from prefect_monte_carlo.lineage import ( create_or_update_lineage_edge, MonteCarloLineageNode ) source = MonteCarloLineageNode( node_name=\"example_table_name\", object_id=\"example_table_name\", # \"table\" is recommended, but you can use any string, e.g. \"csv_file\" object_type=\"table\", resource_name=\"name_your_source_system\", tags=[{\"propertyName\": \"key\", \"propertyValue\": \"value\"}] ) destination = MonteCarloLineageNode( node_name=\"db_name:schema_name.table_name\", object_id=\"db_name:schema_name.table_name\", object_type=\"table\", resource_name=\"your_dwh_resource_name\", tags=[{\"propertyName\": \"key\", \"propertyValue\": \"value\"}] ) @flow def my_monte_carlo_flow(): create_or_update_lineage_edge( source=source, destination=destination, monte_carlo_credentials=MonteCarloCredentials.load(\"my-mc-creds\"), expire_at=datetime.now() + timedelta(days=10), ) ``` \"\"\" client = monte_carlo_credentials . get_client () query = \"\"\" mutation($destination_object_id: String!, $destination_object_type: String!, $destination_resource_name: String!, $source_object_id: String!, $source_object_type: String!, $source_resource_name: String!, $expire_at: DateTime) { createOrUpdateLineageEdge( destination: { objectId: $destination_object_id objectType: $destination_object_type resourceName: $destination_resource_name } source: { objectId: $source_object_id objectType: $source_object_type resourceName: $source_resource_name } expireAt: $expire_at ){ edge{ edgeId } } } \"\"\" variables = dict ( destination_object_id = destination . object_id , destination_object_type = destination . object_type , destination_resource_name = destination . resource_name , source_object_id = source . object_id , source_object_type = source . object_type , source_resource_name = source . resource_name , expire_at = expire_at . isoformat () if expire_at else None , ) response = client ( query = query , variables = variables ) edge_id = response [ \"create_or_update_lineage_edge\" ][ \"edge\" ][ \"edge_id\" ] return edge_id","title":"create_or_update_lineage_edge()"},{"location":"lineage/#prefect_monte_carlo.lineage.create_or_update_lineage_node","text":"Task for creating or updating a lineage node via the Monte Carlo GraphQL API. Parameters: Name Type Description Default monte_carlo_credentials MonteCarloCredentials The Monte Carlo credentials block used to generate. required node_name str The name of the lineage node. required object_id str The object ID of the lineage node. required object_type str The object type of the lineage node. required resource_name str The resource name of the lineage node. required tags Optional [ List [ Dict [ str , str ]]] A list of tags to apply to the lineage node. None Returns: Type Description str The MCON identifying the lineage node. Example Create or update a lineage node from a MonteCarloLineageNode object: from prefect import flow from prefect_monte_carlo.credentials import MonteCarloCredentials from prefect_monte_carlo.lineage import ( create_or_update_lineage_node , MonteCarloLineageNode ) mc_node = MonteCarloLineageNode ( node_name = \"source_node\" , object_id = \"my_source_object_id\" , object_type = \"table\" , resource_name = \"my_source_resource_name\" , tags = [{ \"propertyName\" : \"tag_key\" , \"propertyValue\" : \"tag_value\" }], ) @flow def monte_carlo_lineage_flow (): node_mcon = create_or_update_lineage_node ( monte_carlo_credentials = MonteCarloCredentials . load ( \"my-mc-creds\" ), ** mc_node . dict (), Source code in prefect_monte_carlo/lineage.py 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 @task ( retries = 2 , retry_delay_seconds = 3 , description = \"Create or update a Monte Carlo lineage node via the GraphQL API.\" , ) async def create_or_update_lineage_node ( monte_carlo_credentials : MonteCarloCredentials , node_name : str , object_id : str , object_type : str , resource_name : str , tags : Optional [ List [ Dict [ str , str ]]] = None , ) -> str : \"\"\"Task for creating or updating a lineage node via the Monte Carlo GraphQL API. Args: monte_carlo_credentials: The Monte Carlo credentials block used to generate. node_name: The name of the lineage node. object_id: The object ID of the lineage node. object_type: The object type of the lineage node. resource_name: The resource name of the lineage node. tags: A list of tags to apply to the lineage node. Returns: The MCON identifying the lineage node. Example: Create or update a lineage node from a `MonteCarloLineageNode` object: ```python from prefect import flow from prefect_monte_carlo.credentials import MonteCarloCredentials from prefect_monte_carlo.lineage import ( create_or_update_lineage_node, MonteCarloLineageNode ) mc_node = MonteCarloLineageNode( node_name=\"source_node\", object_id=\"my_source_object_id\", object_type=\"table\", resource_name=\"my_source_resource_name\", tags=[{\"propertyName\": \"tag_key\", \"propertyValue\": \"tag_value\"}], ) @flow def monte_carlo_lineage_flow(): node_mcon = create_or_update_lineage_node( monte_carlo_credentials=MonteCarloCredentials.load(\"my-mc-creds\"), **mc_node.dict(), ``` \"\"\" mc_client = monte_carlo_credentials . get_client () response = mc_client ( query = \"\"\" mutation($node_name: String!, $object_id: String!, $object_type: String!, $resource_name: String!, $tags: [ObjectPropertyInput] ) { createOrUpdateLineageNode( name: $node_name, objectId: $object_id, objectType: $object_type, resourceName: $resource_name, properties: $tags ){ node{ mcon } } } \"\"\" , variables = dict ( node_name = node_name , object_id = object_id , object_type = object_type , resource_name = resource_name , tags = tags , ), ) mcon_string = response [ \"create_or_update_lineage_node\" ][ \"node\" ][ \"mcon\" ] return mcon_string","title":"create_or_update_lineage_node()"},{"location":"resources/","text":"prefect_monte_carlo.resources Module defining tasks for interacting with Monte Carlo resources. Classes Functions get_monte_carlo_resources async Task to retrieve aggregate Monte Carlo resource information via the getResources GraphQL query. Fields selected by this query include: name , type , id , uuid , isDefault , and isUserProvided . Parameters: Name Type Description Default monte_carlo_credentials MonteCarloCredentials The Monte Carlo credentials block used to generate an authenticated GraphQL API client via pycarlo. required Returns: Type Description box . BoxList A box.BoxList of Monte Carlo resources. Source code in prefect_monte_carlo/resources.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 @task async def get_monte_carlo_resources ( monte_carlo_credentials : MonteCarloCredentials , ) -> box . BoxList : \"\"\" Task to retrieve aggregate Monte Carlo resource information via the `getResources` GraphQL query. Fields selected by this query include: `name`, `type`, `id`, `uuid`, `isDefault`, and `isUserProvided`. Args: monte_carlo_credentials: The Monte Carlo credentials block used to generate an authenticated GraphQL API client via pycarlo. Returns: A `box.BoxList` of Monte Carlo resources. \"\"\" client = monte_carlo_credentials . get_client () query = \"\"\" query { getResources { name type id uuid isDefault isUserProvided } } \"\"\" return client ( query )","title":"Resources"},{"location":"resources/#prefect_monte_carlo.resources","text":"Module defining tasks for interacting with Monte Carlo resources.","title":"resources"},{"location":"resources/#prefect_monte_carlo.resources-classes","text":"","title":"Classes"},{"location":"resources/#prefect_monte_carlo.resources-functions","text":"","title":"Functions"},{"location":"resources/#prefect_monte_carlo.resources.get_monte_carlo_resources","text":"Task to retrieve aggregate Monte Carlo resource information via the getResources GraphQL query. Fields selected by this query include: name , type , id , uuid , isDefault , and isUserProvided . Parameters: Name Type Description Default monte_carlo_credentials MonteCarloCredentials The Monte Carlo credentials block used to generate an authenticated GraphQL API client via pycarlo. required Returns: Type Description box . BoxList A box.BoxList of Monte Carlo resources. Source code in prefect_monte_carlo/resources.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 @task async def get_monte_carlo_resources ( monte_carlo_credentials : MonteCarloCredentials , ) -> box . BoxList : \"\"\" Task to retrieve aggregate Monte Carlo resource information via the `getResources` GraphQL query. Fields selected by this query include: `name`, `type`, `id`, `uuid`, `isDefault`, and `isUserProvided`. Args: monte_carlo_credentials: The Monte Carlo credentials block used to generate an authenticated GraphQL API client via pycarlo. Returns: A `box.BoxList` of Monte Carlo resources. \"\"\" client = monte_carlo_credentials . get_client () query = \"\"\" query { getResources { name type id uuid isDefault isUserProvided } } \"\"\" return client ( query )","title":"get_monte_carlo_resources()"},{"location":"utilities/","text":"prefect_monte_carlo.utilities Module to define Monte Carlo utility functions. Classes Functions rule_uuid_from_name async Get the UUID of a Monte Carlo monitor rule from its name. Parameters: Name Type Description Default rule_name str Name of the Monte Carlo monitor rule. required monte_carlo_credentials MonteCarloCredentials Credentials to authenticate with the Monte Carlo GraphQL API. required Source code in prefect_monte_carlo/utilities.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 async def rule_uuid_from_name ( rule_name : str , monte_carlo_credentials : MonteCarloCredentials , ) -> UUID : \"\"\"Get the UUID of a Monte Carlo monitor rule from its name. Args: rule_name: Name of the Monte Carlo monitor rule. monte_carlo_credentials: Credentials to authenticate with the Monte Carlo GraphQL API. \"\"\" query = f \"\"\" query {{ getCustomRule ( descriptionContains: \" { rule_name } \" ) {{ uuid }} }} \"\"\" client = monte_carlo_credentials . get_client () return client ( query ) . get_custom_rule . uuid validate_tags Validate that Monte Carlo lineage node tags are in the correct format. Parameters: Name Type Description Default tags List [ Dict [ str , str ]] List of user-defined tags to validate. required Raises: Type Description MonteCarloIncorrectTagsFormatException If the tags are not well-formatted. Source code in prefect_monte_carlo/utilities.py 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 def validate_tags ( tags : List [ Dict [ str , str ]]): \"\"\"Validate that Monte Carlo lineage node tags are in the correct format. Args: tags: List of user-defined tags to validate. Raises: MonteCarloIncorrectTagsFormatException: If the tags are not well-formatted. \"\"\" for tag in tags : if tag . keys () != { \"propertyName\" , \"propertyValue\" }: raise MonteCarloIncorrectTagsFormatException ( \"Must provide tags as a list of dicts like \" '[{\"propertyName\": \"tag_name\", \"propertyValue\": \"tag_value\"}].' , \"You provided: \" , tag , )","title":"Utilities"},{"location":"utilities/#prefect_monte_carlo.utilities","text":"Module to define Monte Carlo utility functions.","title":"utilities"},{"location":"utilities/#prefect_monte_carlo.utilities-classes","text":"","title":"Classes"},{"location":"utilities/#prefect_monte_carlo.utilities-functions","text":"","title":"Functions"},{"location":"utilities/#prefect_monte_carlo.utilities.rule_uuid_from_name","text":"Get the UUID of a Monte Carlo monitor rule from its name. Parameters: Name Type Description Default rule_name str Name of the Monte Carlo monitor rule. required monte_carlo_credentials MonteCarloCredentials Credentials to authenticate with the Monte Carlo GraphQL API. required Source code in prefect_monte_carlo/utilities.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 async def rule_uuid_from_name ( rule_name : str , monte_carlo_credentials : MonteCarloCredentials , ) -> UUID : \"\"\"Get the UUID of a Monte Carlo monitor rule from its name. Args: rule_name: Name of the Monte Carlo monitor rule. monte_carlo_credentials: Credentials to authenticate with the Monte Carlo GraphQL API. \"\"\" query = f \"\"\" query {{ getCustomRule ( descriptionContains: \" { rule_name } \" ) {{ uuid }} }} \"\"\" client = monte_carlo_credentials . get_client () return client ( query ) . get_custom_rule . uuid","title":"rule_uuid_from_name()"},{"location":"utilities/#prefect_monte_carlo.utilities.validate_tags","text":"Validate that Monte Carlo lineage node tags are in the correct format. Parameters: Name Type Description Default tags List [ Dict [ str , str ]] List of user-defined tags to validate. required Raises: Type Description MonteCarloIncorrectTagsFormatException If the tags are not well-formatted. Source code in prefect_monte_carlo/utilities.py 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 def validate_tags ( tags : List [ Dict [ str , str ]]): \"\"\"Validate that Monte Carlo lineage node tags are in the correct format. Args: tags: List of user-defined tags to validate. Raises: MonteCarloIncorrectTagsFormatException: If the tags are not well-formatted. \"\"\" for tag in tags : if tag . keys () != { \"propertyName\" , \"propertyValue\" }: raise MonteCarloIncorrectTagsFormatException ( \"Must provide tags as a list of dicts like \" '[{\"propertyName\": \"tag_name\", \"propertyValue\": \"tag_value\"}].' , \"You provided: \" , tag , )","title":"validate_tags()"}]}