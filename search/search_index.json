{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"prefect-monte-carlo","text":""},{"location":"#welcome","title":"Welcome!","text":"<p>A collection of Prefect tasks and flows to interact with Monte Carlo from workflows.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#python-setup","title":"Python setup","text":"<p>Requires an installation of Python 3.7+.</p> <p>We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv.</p> <p>These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install <code>prefect-monte-carlo</code> with <code>pip</code>:</p> <pre><code>pip install prefect-monte-carlo\n</code></pre> <p>Then, register this collection's blocks to view them on Prefect Cloud:</p> <pre><code>prefect block register -m prefect_monte_carlo\n</code></pre> <p>Note, to use the <code>load</code> method on Blocks, you must already have a block document saved through code or saved through the UI.</p>"},{"location":"#write-and-run-a-flow","title":"Write and run a flow","text":""},{"location":"#execute-a-query-against-the-monte-carlo-graphql-api","title":"Execute a query against the Monte Carlo GraphQL API","text":"<pre><code>from prefect import flow\nfrom prefect_monte_carlo.graphql import execute_graphql_operation\nfrom prefect_monte_carlo.credentials import MonteCarloCredentials\n\n@flow\ndef example_execute_query():\n    monte_carlo_credentials = MonteCarloCredentials.load(\"my-mc-creds\")\n    result = execute_graphql_operation(\n        monte_carlo_credentials=monte_carlo_credentials,\n        operation=\"query getUser { getUser { email firstName lastName }}\",\n    )\n</code></pre>"},{"location":"#create-or-update-monte-carlo-lineage","title":"Create or update Monte Carlo lineage","text":"<pre><code>from prefect import flow\nfrom prefect.context import get_run_context\nfrom prefect_monte_carlo.credentials import MonteCarloCredentials\nfrom prefect_monte_carlo.lineage import create_or_update_lineage, MonteCarloLineageNode\n\n@flow\ndef monte_carlo_orchestrator():\n    current_flow_run_name = get_run_context().flow_run.name\n\n    source = MonteCarloLineageNode(\n        node_name=\"source_dataset\",\n        object_id=\"source_dataset\",\n        object_type=\"table\",\n        resource_name=\"some_resource_name\",\n        tags=[{\"propertyName\": \"dataset_owner\", \"propertyValue\": \"owner_name\"}],\n    )\n\n    destination = MonteCarloLineageNode(\n        node_name=\"destination_dataset\",\n        object_id=\"destination_dataset\",\n        object_type=\"table\",\n        resource_name=\"some_resource_name\",\n        tags=[{\"propertyName\": \"dataset_owner\", \"propertyValue\": \"owner_name\"}],\n    )\n\n    # `create_or_update_lineage` is a flow, so this will be a subflow run\n    # `extra_tags` are added to both the `source` and `destination` nodes\n    create_or_update_lineage(\n        monte_carlo_credentials=MonteCarloCredentials.load(\"my-mc-creds)\n        source=source,\n        destination=destination,\n        expire_at=datetime.now() + timedelta(days=10),\n        extra_tags=[{\"propertyName\": \"flow_run_name\", \"propertyValue\": current_flow_run_name}]\n    )\n</code></pre>"},{"location":"#conditionally-execute-a-flow-based-on-a-monte-carlo-circuit-breaker-rule","title":"Conditionally execute a flow based on a Monte Carlo circuit breaker rule","text":"<pre><code>from prefect import flow\nfrom prefect_monte_carlo.circuit_breakers import skip_if_circuit_breaker_flipped\nfrom prefect_monte_carlo.credentials import MonteCarloCredentials\n\nmy_mc_creds = MonteCarloCredentials.load(\"my-mc-creds\")\nrule_name = \"myRule\"\n\n@flow\n@skip_if_circuit_breaker_flipped(\n    monte_carlo_credentials=my_mc_creds\n    rule_name=rule_name,\n)\ndef conditional_flow():\n    logger = get_run_logger()\n    logger.info(\"If you see this, your circuit breaker rule was not breached!\")\n</code></pre>"},{"location":"#resources","title":"Resources","text":"<p>If you encounter any bugs while using <code>prefect-monte-carlo</code>, feel free to open an issue in the prefect-monte-carlo repository.</p> <p>If you have any questions or issues while using <code>prefect-monte-carlo</code>, you can find help in either the Prefect Discourse forum or the Prefect Slack community.</p> <p>Feel free to star or watch <code>prefect-monte-carlo</code> for updates too!</p>"},{"location":"#contributing","title":"Contributing","text":"<p>If you'd like to help contribute to fix an issue or add a feature to <code>prefect-monte-carlo</code>, please propose changes through a pull request from a fork of the repository.</p> <p>Here are the steps:</p> <ol> <li>Fork the repository</li> <li>Clone the forked repository</li> <li>Install the repository and its dependencies: <pre><code>pip install -e \".[dev]\"\n</code></pre></li> <li>Make desired changes</li> <li>Add tests</li> <li>Insert an entry to CHANGELOG.md</li> <li>Install <code>pre-commit</code> to perform quality checks prior to commit:</li> </ol> <p><pre><code>pre-commit install\n</code></pre> 8. <code>git commit</code>, <code>git push</code>, and create a pull request</p>"},{"location":"circuit_breakers/","title":"Circuit Breakers","text":""},{"location":"circuit_breakers/#prefect_monte_carlo.circuit_breakers","title":"<code>prefect_monte_carlo.circuit_breakers</code>","text":"<p>Module for interacting with Monte Carlo circuit breakers / monitor rules.</p>"},{"location":"circuit_breakers/#prefect_monte_carlo.circuit_breakers-classes","title":"Classes","text":""},{"location":"circuit_breakers/#prefect_monte_carlo.circuit_breakers-functions","title":"Functions","text":""},{"location":"circuit_breakers/#prefect_monte_carlo.circuit_breakers.circuit_breaker_is_flipped","title":"<code>circuit_breaker_is_flipped</code>  <code>async</code>","text":"<p>A task to check if a Monte Carlo circuit breaker / monitor rule is breached.</p> <p>If <code>rule_name</code> is provided, the task will attempt to fetch the associated <code>rule_uuid</code> from the Monte Carlo GraphQL API and use it to trigger the custom rule.</p> <p>To surface pycarlo <code>CircuitBreakerService</code> polling logs as Prefect logs, use the <code>DEBUG</code> log level when running your flow.</p> <p>Parameters:</p> Name Type Description Default <code>monte_carlo_credentials</code> <code>MonteCarloCredentials</code> <p>The Monte Carlo credentials block used to generate an authenticated GraphQL API client.</p> required <code>rule_uuid</code> <code>Optional[UUID]</code> <p>UUID of the rule (custom SQL monitor) to execute.</p> <code>None</code> <code>rule_name</code> <code>Optional[str]</code> <p>Name of the rule (custom SQL monitor) to execute.</p> <code>None</code> <code>timeout_in_minutes</code> <code>Optional[int]</code> <p>How long to wait for SQL rule run logs.</p> <code>5</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If both (or neither) <code>rule_uuid</code> and <code>rule_name</code> are provided.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the rule is breached, <code>False</code> otherwise.</p> Example <p>Check if a rule is breached by UUID: <pre><code>from prefect import flow\nfrom prefect.orion.schemas.states import Cancelled\nfrom prefect_monte_carlo.circuit_breakers import circuit_breaker_is_flipped\n\n@task\ndef do_something_if_not_breached():\n    pass\n\n@flow\ndef conditional_flow():\n    # we can also pass `rule_name` instead of rule_uuid\n    rule_uuid = \"af6fdb62-7496-4b8b-ba09-38f83a311c17\" # or as a UUID object\n    if circuit_breaker_is_flipped(\n        monte_carlo_credentials=MonteCarloCredentials.load(\n            \"monte-carlo-credentials\"\n        ),\n        rule_uuid=rule_uuid\n    ):\n        return Cancelled(message=\"Monitor rule breached - cancelling flow run.\")\n\n    do_something_if_not_breached()\n</code></pre></p> Source code in <code>prefect_monte_carlo/circuit_breakers.py</code> <pre><code>@task\nasync def circuit_breaker_is_flipped(\n    monte_carlo_credentials: MonteCarloCredentials,\n    rule_uuid: Optional[UUID] = None,\n    rule_name: Optional[str] = None,\n    timeout_in_minutes: Optional[int] = 5,\n) -&gt; bool:\n    \"\"\"A task to check if a Monte Carlo circuit breaker / monitor rule is breached.\n\n    If `rule_name` is provided, the task will attempt to fetch the associated\n    `rule_uuid` from the Monte Carlo GraphQL API and use it to trigger the custom\n    rule.\n\n    To surface pycarlo `CircuitBreakerService` polling logs as Prefect logs, use the\n    `DEBUG` log level when running your flow.\n\n    Args:\n        monte_carlo_credentials: The Monte Carlo credentials block used to\n            generate an authenticated GraphQL API client.\n        rule_uuid: UUID of the rule (custom SQL monitor) to execute.\n        rule_name: Name of the rule (custom SQL monitor) to execute.\n        timeout_in_minutes: How long to wait for SQL rule run logs.\n\n    Raises:\n        ValueError: If both (or neither) `rule_uuid` and `rule_name` are provided.\n\n    Returns:\n        `True` if the rule is breached, `False` otherwise.\n\n    Example:\n        Check if a rule is breached by UUID:\n        ```python\n        from prefect import flow\n        from prefect.orion.schemas.states import Cancelled\n        from prefect_monte_carlo.circuit_breakers import circuit_breaker_is_flipped\n\n        @task\n        def do_something_if_not_breached():\n            pass\n\n        @flow\n        def conditional_flow():\n            # we can also pass `rule_name` instead of rule_uuid\n            rule_uuid = \"af6fdb62-7496-4b8b-ba09-38f83a311c17\" # or as a UUID object\n            if circuit_breaker_is_flipped(\n                monte_carlo_credentials=MonteCarloCredentials.load(\n                    \"monte-carlo-credentials\"\n                ),\n                rule_uuid=rule_uuid\n            ):\n                return Cancelled(message=\"Monitor rule breached - cancelling flow run.\")\n\n            do_something_if_not_breached()\n        ```\n    \"\"\"\n    monte_carlo_client = monte_carlo_credentials.get_client()\n\n    if not (bool(rule_uuid) ^ bool(rule_name)):\n        raise ValueError(\n            \"Please provide either `rule_uuid` or `rule_name`, but not both\"\n        )\n\n    if rule_uuid:\n        rule_uuid = UUID(rule_uuid)\n    else:\n        rule_uuid = await rule_uuid_from_name(\n            rule_name=rule_name,\n            monte_carlo_credentials=monte_carlo_credentials,\n        )\n\n    logger = get_run_logger()\n\n    circuit_breaker_service = CircuitBreakerService(\n        mc_client=monte_carlo_client, print_func=logger.debug\n    )\n\n    job_execution_uuid = circuit_breaker_service.trigger(rule_uuid=rule_uuid)\n\n    logger.debug(\n        f\"Triggered rule: {rule_uuid} with job execution UUID: {job_execution_uuid}\"\n    )\n\n    try:\n        breaches_count = circuit_breaker_service.poll(\n            job_execution_uuid=job_execution_uuid, timeout_in_minutes=timeout_in_minutes\n        )\n\n        if breaches_count &gt; 0:\n            logger.info(\n                f\"Found {breaches_count} breach(es)\"\n                f\" for rule {rule_uuid} during job: {job_execution_uuid}\"\n                f\" - see more details at https://getmontecarlo.com/monitors/{rule_uuid}\"\n            )\n            return True\n\n        logger.info(f\"Found no breach for rule with uuid: '{rule_uuid}'.\")\n        return False\n\n    except CircuitBreakerPollException as e:\n        logger.error(\n            f\"Encountered an error when attempting to get circuit breaker status: {e!r}\"\n        )\n        raise\n</code></pre>"},{"location":"circuit_breakers/#prefect_monte_carlo.circuit_breakers.skip_if_circuit_breaker_flipped","title":"<code>skip_if_circuit_breaker_flipped</code>","text":"<p>Decorator to run a user-defined flow only if a given Monte Carlo monitor rule is not breached.</p> <p>This decorator must be placed between your <code>@flow</code> decorator and the python function that defines your flow.</p> <p>Parameters:</p> Name Type Description Default <code>monte_carlo_credentials</code> <code>MonteCarloCredentials</code> <p>The credentials to use to generate an authenticated Monte Carlo GraphQL client via PyCarlo.</p> required <code>rule_uuid</code> <code>Optional[UUID]</code> <p>The UUID of the monitor rule to check.</p> <code>None</code> <code>rule_name</code> <code>Optional[str]</code> <p>The name of the monitor rule to check.</p> <code>None</code> <p>Examples:</p> <p>Define a flow that will only run if <code>my_monitor_rule</code> is not breached: <pre><code>from prefect import flow\nfrom prefect_monte_carlo.circuit_breakers import skip_if_circuit_breaker_flipped\nfrom prefect_monte_carlo.credentials import MonteCarloCredentials\n\n# suppose `my_monitor_rule` has a UUID `1123e4567-e89b-12d3-a456-426614174000`\n\n@flow\n@skip_if_circuit_breaker_flipped(\n    rule_uuid=\"123e4567-e89b-12d3-a456-426614174000\",\n    monte_carlo_credentials=MonteCarloCredentials.load(\"my-montecarlo-credentials\")\n)\ndef my_flow():\n    print(\"I will only print if `my_monitor_rule` is not breached.\")\n</code></pre></p> <p>Reference a rule by name: <pre><code>@flow\n@skip_if_circuit_breaker_flipped(\n    rule_name=\"my_monitor_rule\",\n    monte_carlo_credentials=MonteCarloCredentials.load(\"my-montecarlo-credentials\")\n)\ndef my_flow():\n    print(\"I will only print if `my_monitor_rule` is not breached.\")\n</code></pre></p> Source code in <code>prefect_monte_carlo/circuit_breakers.py</code> <pre><code>def skip_if_circuit_breaker_flipped(\n    monte_carlo_credentials: MonteCarloCredentials,\n    rule_uuid: Optional[UUID] = None,\n    rule_name: Optional[str] = None,\n):\n    \"\"\"Decorator to run a user-defined flow only if a given Monte Carlo\n    monitor rule is not breached.\n\n    This decorator must be placed between your `@flow` decorator and\n    the python function that defines your flow.\n\n    Args:\n        monte_carlo_credentials: The credentials to use to generate an\n            authenticated Monte Carlo GraphQL client via PyCarlo.\n        rule_uuid: The UUID of the monitor rule to check.\n        rule_name: The name of the monitor rule to check.\n\n    Examples:\n        Define a flow that will only run if `my_monitor_rule` is not breached:\n        ```python\n        from prefect import flow\n        from prefect_monte_carlo.circuit_breakers import skip_if_circuit_breaker_flipped\n        from prefect_monte_carlo.credentials import MonteCarloCredentials\n\n        # suppose `my_monitor_rule` has a UUID `1123e4567-e89b-12d3-a456-426614174000`\n\n        @flow\n        @skip_if_circuit_breaker_flipped(\n            rule_uuid=\"123e4567-e89b-12d3-a456-426614174000\",\n            monte_carlo_credentials=MonteCarloCredentials.load(\"my-montecarlo-credentials\")\n        )\n        def my_flow():\n            print(\"I will only print if `my_monitor_rule` is not breached.\")\n        ```\n\n        Reference a rule by name:\n        ```python\n        @flow\n        @skip_if_circuit_breaker_flipped(\n            rule_name=\"my_monitor_rule\",\n            monte_carlo_credentials=MonteCarloCredentials.load(\"my-montecarlo-credentials\")\n        )\n        def my_flow():\n            print(\"I will only print if `my_monitor_rule` is not breached.\")\n        ```\n    \"\"\"\n    monitor_rule_kwargs = dict(\n        rule_name=rule_name,\n        rule_uuid=rule_uuid,\n        monte_carlo_credentials=monte_carlo_credentials,\n    )\n\n    def decorator(func):\n        \"\"\"Layer to catch the function being decorated.\"\"\"\n\n        if not is_async_fn(func):\n\n            @functools.wraps(func)\n            def wrapper(*args, **kwargs):\n                \"\"\"Modified synchronous user-flow to return.\"\"\"\n                if circuit_breaker_is_flipped(**monitor_rule_kwargs):\n                    return Cancelled()\n                return func(*args, **kwargs)\n\n            return wrapper\n        else:\n\n            @functools.wraps(func)\n            async def wrapper(*args, **kwargs):\n                \"\"\"Modified asynchronous user-flow to return.\"\"\"\n                if circuit_breaker_is_flipped(**monitor_rule_kwargs):\n                    return Cancelled()\n                return await func(*args, **kwargs)\n\n            return wrapper\n\n    return decorator\n</code></pre>"},{"location":"credentials/","title":"Credentials","text":""},{"location":"credentials/#prefect_monte_carlo.credentials","title":"<code>prefect_monte_carlo.credentials</code>","text":"<p>Credential classes used to perform authenticated interactions with Monte Carlo</p>"},{"location":"credentials/#prefect_monte_carlo.credentials-classes","title":"Classes","text":""},{"location":"credentials/#prefect_monte_carlo.credentials.MonteCarloCredentials","title":"<code>MonteCarloCredentials</code>","text":"<p>             Bases: <code>Block</code></p> <p>Block used to manage Monte Carlo authentication.</p> <p>Attributes:</p> Name Type Description <code>api_key</code> <code>SecretStr</code> <p>The Monte Carlo API key to authenticate with.</p> <code>api_key_id</code> <code>str</code> <p>The Monte Carlo API key ID to authenticate with.</p> <code>catalog_url</code> <code>Optional[str]</code> <p>The URL of the Monte Carlo catalog to use.</p> Example <p>Load stored Monte Carlo credentials: <pre><code>from prefect_monte_carlo.credentials import MonteCarloCredentials\nmontecarlo_credentials_block = MonteCarloCredentials.load(\"BLOCK_NAME\")\n</code></pre></p> Source code in <code>prefect_monte_carlo/credentials.py</code> <pre><code>class MonteCarloCredentials(Block):\n    \"\"\"\n    Block used to manage Monte Carlo authentication.\n\n    Attributes:\n        api_key: The Monte Carlo API key to authenticate with.\n        api_key_id: The Monte Carlo API key ID to authenticate with.\n        catalog_url: The URL of the Monte Carlo catalog to use.\n\n    Example:\n        Load stored Monte Carlo credentials:\n        ```python\n        from prefect_monte_carlo.credentials import MonteCarloCredentials\n        montecarlo_credentials_block = MonteCarloCredentials.load(\"BLOCK_NAME\")\n        ```\n    \"\"\"\n\n    _block_type_name = \"Monte Carlo Credentials\"\n    _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/5OqrPNRdLMvqZzxo9f6Z25/f920dff0f1201fc014b0b083a6d2fdb1/image.png?h=250\"  # noqa\n    _documentation_url = \"https://prefecthq.github.io/prefect-monte-carlo/credentials/#prefect_monte_carlo.credentials.MonteCarloCredentials\"  # noqa\n\n    api_key: SecretStr = Field(\n        default=...,\n        title=\"API Key\",\n        description=\"The token to authenticate with Monte Carlo's GraphQL API.\",\n    )\n\n    api_key_id: str = Field(\n        default=...,\n        title=\"API Key ID\",\n        description=\"The ID associated with the Monte Carlo API token.\",\n    )\n\n    catalog_url: Optional[str] = Field(\n        default=\"https://getmontecarlo.com/catalog\",\n        title=\"Monte Carlo catalog URL\",\n        description=\"The URL of the Monte Carlo catalog.\",\n    )\n\n    def get_client(self) -&gt; Client:\n        \"\"\"\n        Gets an authenticated Monte Carlo GraphQL client via pycarlo.\n\n        Returns:\n            An authenticated Monte Carlo GraphQL client.\n\n        Example:\n            Gets an authenticated Monte Carlo GraphQL client.\n            ```python\n            from prefect import flow\n            from prefect_monte_carlo.graphql import execute_graphql_operation\n            from prefect_monte_carlo.credentials import MonteCarloCredentials\n\n            @flow\n            def example_execute_query():\n                monte_carlo_credentials = MonteCarloCredentials.load(\n                    \"my-montecarlo-credentials\"\n                )\n                result = execute_graphql_operation(\n                    monte_carlo_credentials=monte_carlo_credentials,\n                    query=\"query getUser { getUser { email firstName lastName }}\",\n                )\n\n            example_execute_query()\n            ```\n        \"\"\"\n\n        return Client(\n            session=Session(\n                mcd_id=self.api_key_id,\n                mcd_token=self.api_key.get_secret_value(),\n            )\n        )\n</code></pre>"},{"location":"credentials/#prefect_monte_carlo.credentials.MonteCarloCredentials-functions","title":"Functions","text":""},{"location":"credentials/#prefect_monte_carlo.credentials.MonteCarloCredentials.get_client","title":"<code>get_client</code>","text":"<p>Gets an authenticated Monte Carlo GraphQL client via pycarlo.</p> <p>Returns:</p> Type Description <code>Client</code> <p>An authenticated Monte Carlo GraphQL client.</p> Example <p>Gets an authenticated Monte Carlo GraphQL client. <pre><code>from prefect import flow\nfrom prefect_monte_carlo.graphql import execute_graphql_operation\nfrom prefect_monte_carlo.credentials import MonteCarloCredentials\n\n@flow\ndef example_execute_query():\n    monte_carlo_credentials = MonteCarloCredentials.load(\n        \"my-montecarlo-credentials\"\n    )\n    result = execute_graphql_operation(\n        monte_carlo_credentials=monte_carlo_credentials,\n        query=\"query getUser { getUser { email firstName lastName }}\",\n    )\n\nexample_execute_query()\n</code></pre></p> Source code in <code>prefect_monte_carlo/credentials.py</code> <pre><code>def get_client(self) -&gt; Client:\n    \"\"\"\n    Gets an authenticated Monte Carlo GraphQL client via pycarlo.\n\n    Returns:\n        An authenticated Monte Carlo GraphQL client.\n\n    Example:\n        Gets an authenticated Monte Carlo GraphQL client.\n        ```python\n        from prefect import flow\n        from prefect_monte_carlo.graphql import execute_graphql_operation\n        from prefect_monte_carlo.credentials import MonteCarloCredentials\n\n        @flow\n        def example_execute_query():\n            monte_carlo_credentials = MonteCarloCredentials.load(\n                \"my-montecarlo-credentials\"\n            )\n            result = execute_graphql_operation(\n                monte_carlo_credentials=monte_carlo_credentials,\n                query=\"query getUser { getUser { email firstName lastName }}\",\n            )\n\n        example_execute_query()\n        ```\n    \"\"\"\n\n    return Client(\n        session=Session(\n            mcd_id=self.api_key_id,\n            mcd_token=self.api_key.get_secret_value(),\n        )\n    )\n</code></pre>"},{"location":"exceptions/","title":"Exceptions","text":""},{"location":"exceptions/#prefect_monte_carlo.exceptions","title":"<code>prefect_monte_carlo.exceptions</code>","text":"<p>Module for defining useful Monte Carlo exceptions.</p>"},{"location":"exceptions/#prefect_monte_carlo.exceptions-classes","title":"Classes","text":""},{"location":"exceptions/#prefect_monte_carlo.exceptions.MonteCarloIncorrectTagsFormatException","title":"<code>MonteCarloIncorrectTagsFormatException</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Exception for incorrect tags format</p> Source code in <code>prefect_monte_carlo/exceptions.py</code> <pre><code>class MonteCarloIncorrectTagsFormatException(Exception):\n    \"\"\"Exception for incorrect tags format\"\"\"\n</code></pre>"},{"location":"graphql/","title":"GraphQL","text":""},{"location":"graphql/#prefect_monte_carlo.graphql","title":"<code>prefect_monte_carlo.graphql</code>","text":"<p>Module for GraphQL queries and mutations.</p>"},{"location":"graphql/#prefect_monte_carlo.graphql-classes","title":"Classes","text":""},{"location":"graphql/#prefect_monte_carlo.graphql-functions","title":"Functions","text":""},{"location":"graphql/#prefect_monte_carlo.graphql.execute_graphql_operation","title":"<code>execute_graphql_operation</code>  <code>async</code>","text":"<p>Executes a GraphQL operation via the Monte Carlo GraphQL API.</p> <p>Parameters:</p> Name Type Description Default <code>monte_carlo_credentials</code> <code>MonteCarloCredentials</code> <p>Credentials to authenticate with the Monte Carlo GraphQL API.</p> required <code>operation</code> <code>str</code> <p>The GraphQL operation to execute - it can be a valid GraphQL query or mutation.</p> required <code>variables</code> <code>Optional[Dict]</code> <p>The variables to pass to the GraphQL operation.</p> <code>None</code> <p>Returns:</p> Type Description <code>Box</code> <p>The results of the GraphQL operation as a <code>box.Box</code> object.</p> Example <p>Executes a simple GraphQL query against the Monte Carlo GraphQL API. <pre><code>from prefect import flow\nfrom prefect_monte_carlo.graphql import execute_graphql_operation\nfrom prefect_monte_carlo.credentials import MonteCarloCredentials\n\n@flow\ndef example_execute_query():\n    monte_carlo_credentials = MonteCarloCredentials.load(\n        \"my-montecarlo-credentials\"\n    )\n    result = execute_graphql_operation(\n        monte_carlo_credentials=monte_carlo_credentials,\n        operation=\"query getUser { getUser { email firstName lastName }}\",\n    )\n\nexample_execute_query()\n</code></pre></p> <p>Executes a GraphQL query with variables. <pre><code>from prefect import flow\n\nfrom prefect_monte_carlo.credentials import MonteCarloCredentials\nfrom prefect_monte_carlo.graphql import execute_graphql_operation\n\nmc_creds = MonteCarloCredentials.load(\"monte-carlo-credentials\")\n\nquery = '''\n    query getTables($first: Int){\n        getTables(first: $first) {\n            edges {\n                node {\n                    fullTableId\n                }\n            }\n        }\n    }\n'''\n\n@flow\ndef test_mc():\n\n    result = execute_graphql_operation(\n        monte_carlo_credentials=mc_creds,\n        operation=query,\n        variables={\"first\":10}\n    )\n\nif __name__ == \"__main__\":\n    test_mc()\n</code></pre></p> Source code in <code>prefect_monte_carlo/graphql.py</code> <pre><code>@task\nasync def execute_graphql_operation(\n    monte_carlo_credentials: MonteCarloCredentials,\n    operation: str,\n    variables: Optional[Dict] = None,\n) -&gt; box.Box:\n    \"\"\"\n    Executes a GraphQL operation via the Monte Carlo GraphQL API.\n\n    Args:\n        monte_carlo_credentials: Credentials\n            to authenticate with the Monte Carlo GraphQL API.\n        operation: The GraphQL operation to execute - it can be a valid GraphQL\n            query or mutation.\n        variables: The variables to pass to the GraphQL operation.\n\n    Returns:\n        The results of the GraphQL operation as a `box.Box` object.\n\n    Example:\n        Executes a simple GraphQL query against the Monte Carlo GraphQL API.\n        ```python\n        from prefect import flow\n        from prefect_monte_carlo.graphql import execute_graphql_operation\n        from prefect_monte_carlo.credentials import MonteCarloCredentials\n\n        @flow\n        def example_execute_query():\n            monte_carlo_credentials = MonteCarloCredentials.load(\n                \"my-montecarlo-credentials\"\n            )\n            result = execute_graphql_operation(\n                monte_carlo_credentials=monte_carlo_credentials,\n                operation=\"query getUser { getUser { email firstName lastName }}\",\n            )\n\n        example_execute_query()\n        ```\n\n        Executes a GraphQL query with variables.\n        ```python\n        from prefect import flow\n\n        from prefect_monte_carlo.credentials import MonteCarloCredentials\n        from prefect_monte_carlo.graphql import execute_graphql_operation\n\n        mc_creds = MonteCarloCredentials.load(\"monte-carlo-credentials\")\n\n        query = '''\n            query getTables($first: Int){\n                getTables(first: $first) {\n                    edges {\n                        node {\n                            fullTableId\n                        }\n                    }\n                }\n            }\n        '''\n\n        @flow\n        def test_mc():\n\n            result = execute_graphql_operation(\n                monte_carlo_credentials=mc_creds,\n                operation=query,\n                variables={\"first\":10}\n            )\n\n        if __name__ == \"__main__\":\n            test_mc()\n        ```\n    \"\"\"\n    client = monte_carlo_credentials.get_client()\n    return client(operation, variables=variables)\n</code></pre>"},{"location":"lineage/","title":"Lineage","text":""},{"location":"lineage/#prefect_monte_carlo.lineage","title":"<code>prefect_monte_carlo.lineage</code>","text":"<p>Module to define tasks and flows for interacting with lineage resources.</p>"},{"location":"lineage/#prefect_monte_carlo.lineage-classes","title":"Classes","text":""},{"location":"lineage/#prefect_monte_carlo.lineage.MonteCarloLineageNode","title":"<code>MonteCarloLineageNode</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Pydantic Model of a Monte Carlo lineage lineage node.</p> Source code in <code>prefect_monte_carlo/lineage.py</code> <pre><code>class MonteCarloLineageNode(BaseModel):\n    \"\"\"Pydantic Model of a Monte Carlo lineage lineage node.\"\"\"\n\n    node_name: str\n    object_id: str\n    resource_name: str\n    object_type: Optional[str] = \"table\"\n    tags: Optional[List[Dict[str, str]]] = None\n\n    @validator(\"tags\")\n    def valid_tags(cls, tags):\n        \"\"\"Validate that tags are in the correct format.\"\"\"\n        validate_tags(tags)\n        return tags\n</code></pre>"},{"location":"lineage/#prefect_monte_carlo.lineage.MonteCarloLineageNode-functions","title":"Functions","text":""},{"location":"lineage/#prefect_monte_carlo.lineage.MonteCarloLineageNode.valid_tags","title":"<code>valid_tags</code>","text":"<p>Validate that tags are in the correct format.</p> Source code in <code>prefect_monte_carlo/lineage.py</code> <pre><code>@validator(\"tags\")\ndef valid_tags(cls, tags):\n    \"\"\"Validate that tags are in the correct format.\"\"\"\n    validate_tags(tags)\n    return tags\n</code></pre>"},{"location":"lineage/#prefect_monte_carlo.lineage-functions","title":"Functions","text":""},{"location":"lineage/#prefect_monte_carlo.lineage.create_or_update_lineage","title":"<code>create_or_update_lineage</code>  <code>async</code>","text":"<p>Task for creating or updating a lineage node for the given source and destination nodes, as well as for creating a lineage edge between those nodes.</p> <p>Parameters:</p> Name Type Description Default <code>monte_carlo_credentials</code> <code>MonteCarloCredentials</code> <p>The Monte Carlo credentials block used to generate an authenticated GraphQL API client via pycarlo.</p> required <code>source</code> <code>MonteCarloLineageNode</code> <p>A source node configuration - expected to include the following keys: <code>node_name</code>, <code>object_id</code>, <code>object_type</code>, <code>resource_name</code>, <code>tags</code>.</p> required <code>destination</code> <code>MonteCarloLineageNode</code> <p>A destination node configuration - expected to include the following keys: <code>node_name</code>, <code>object_id</code>, <code>object_type</code>, <code>resource_name</code>, <code>tags</code>.</p> required <code>expire_at</code> <code>Optional[datetime]</code> <p>Date and time indicating when to expire a source-destination edge.</p> <code>None</code> <code>extra_tags</code> <code>Optional[List]</code> <p>Optional list of tags to attach to the source and destination node.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the source or destination node configuration is missing <code>object_id</code> or <code>resource_name</code>.</p> <p>Returns:</p> Type Description <code>str</code> <p>The ID of the lineage edge created or updated.</p> Example <p>Create or update a lineage edge between a source and destination node. <pre><code>from prefect import flow\nfrom prefect.context import get_run_context\nfrom prefect_monte_carlo.credentials import MonteCarloCredentials\nfrom prefect_monte_carlo.lineage import (\n    create_or_update_lineage, MonteCarloLineageNode\n)\n\n@flow\ndef monte_carlo_orchestrator():\n    flow_run_name = get_run_context().flow_run.name\n\n    source = MonteCarloLineageNode(\n        node_name=\"source_dataset\",\n        object_id=\"source_dataset\",\n        object_type=\"table\",\n        resource_name=\"some_resource_name\",\n        tags=[{\"propertyName\": \"dataset_owner\", \"propertyValue\": \"owner_name\"}],\n    )\n\n    destination = MonteCarloLineageNode(\n        node_name=\"destination_dataset\",\n        object_id=\"destination_dataset\",\n        object_type=\"table\",\n        resource_name=\"some_resource_name\",\n        tags=[{\"propertyName\": \"dataset_owner\", \"propertyValue\": \"owner_name\"}],\n    )\n\n    # `create_or_update_lineage` is a flow, so this will be a subflow run\n    # `extra_tags` are added to both the `source` and `destination` nodes\n    create_or_update_lineage(\n        monte_carlo_credentials=MonteCarloCredentials.load(\"my-mc-creds\")\n        source=source,\n        destination=destination,\n        expire_at=datetime.now() + timedelta(days=10),\n        extra_tags=[\n            {\"propertyName\": \"flow_run_name\", \"propertyValue\": flow_run_name}\n        ]\n    )\n</code></pre></p> Source code in <code>prefect_monte_carlo/lineage.py</code> <pre><code>@flow(\n    description=\"Create or update a `source` node, `destination` node, and the edge that connects them.\",  # noqa: E501\n)\nasync def create_or_update_lineage(\n    monte_carlo_credentials: MonteCarloCredentials,\n    source: MonteCarloLineageNode,\n    destination: MonteCarloLineageNode,\n    expire_at: Optional[datetime] = None,\n    extra_tags: Optional[List] = None,\n) -&gt; str:\n    \"\"\"Task for creating or updating a lineage node for the given source\n    and destination nodes, as well as for creating a lineage edge between those nodes.\n\n    Args:\n        monte_carlo_credentials: The Monte Carlo credentials block used to generate\n            an authenticated GraphQL API client via pycarlo.\n        source: A source node configuration - expected to include the following\n            keys: `node_name`, `object_id`, `object_type`, `resource_name`, `tags`.\n        destination: A destination node configuration - expected to include the\n            following keys: `node_name`, `object_id`, `object_type`, `resource_name`,\n            `tags`.\n        expire_at: Date and time indicating when to expire\n            a source-destination edge.\n        extra_tags: Optional list of tags to attach to the source\n            and destination node.\n\n    Raises:\n        ValueError: If the source or destination node configuration\n            is missing `object_id` or `resource_name`.\n\n    Returns:\n        The ID of the lineage edge created or updated.\n\n    Example:\n        Create or update a lineage edge between a source and destination node.\n        ```python\n        from prefect import flow\n        from prefect.context import get_run_context\n        from prefect_monte_carlo.credentials import MonteCarloCredentials\n        from prefect_monte_carlo.lineage import (\n            create_or_update_lineage, MonteCarloLineageNode\n        )\n\n        @flow\n        def monte_carlo_orchestrator():\n            flow_run_name = get_run_context().flow_run.name\n\n            source = MonteCarloLineageNode(\n                node_name=\"source_dataset\",\n                object_id=\"source_dataset\",\n                object_type=\"table\",\n                resource_name=\"some_resource_name\",\n                tags=[{\"propertyName\": \"dataset_owner\", \"propertyValue\": \"owner_name\"}],\n            )\n\n            destination = MonteCarloLineageNode(\n                node_name=\"destination_dataset\",\n                object_id=\"destination_dataset\",\n                object_type=\"table\",\n                resource_name=\"some_resource_name\",\n                tags=[{\"propertyName\": \"dataset_owner\", \"propertyValue\": \"owner_name\"}],\n            )\n\n            # `create_or_update_lineage` is a flow, so this will be a subflow run\n            # `extra_tags` are added to both the `source` and `destination` nodes\n            create_or_update_lineage(\n                monte_carlo_credentials=MonteCarloCredentials.load(\"my-mc-creds\")\n                source=source,\n                destination=destination,\n                expire_at=datetime.now() + timedelta(days=10),\n                extra_tags=[\n                    {\"propertyName\": \"flow_run_name\", \"propertyValue\": flow_run_name}\n                ]\n            )\n\n        ```\n    \"\"\"\n    logger = get_run_logger()\n\n    if extra_tags:\n        validate_tags(extra_tags)\n        source.tags = source.tags + extra_tags if source.tags else extra_tags\n        destination.tags = (\n            destination.tags + extra_tags if destination.tags else extra_tags\n        )\n\n    source_node_mcon = await create_or_update_lineage_node(\n        monte_carlo_credentials=monte_carlo_credentials,\n        node_name=source.node_name,\n        object_id=source.object_id,\n        object_type=source.object_type,\n        resource_name=source.resource_name,\n        tags=source.tags,\n    )\n\n    source_node_url = f\"{monte_carlo_credentials.catalog_url}/{source_node_mcon}/table\"\n    logger.info(\"Created or updated a source lineage node %s\", source_node_url)\n\n    destination_node_mcon = await create_or_update_lineage_node(\n        monte_carlo_credentials=monte_carlo_credentials,\n        node_name=destination.node_name,\n        object_id=destination.object_id,\n        object_type=destination.object_type,\n        resource_name=destination.resource_name,\n        tags=destination.tags,\n    )\n\n    destination_node_url = (\n        f\"{monte_carlo_credentials.catalog_url}/{destination_node_mcon}/table\"\n    )\n    logger.info(\n        \"Created or updated a destination lineage node %s\", destination_node_url\n    )\n\n    # edge between source and destination nodes\n    job_timestamp = await create_or_update_lineage_edge(\n        monte_carlo_credentials=monte_carlo_credentials,\n        source=source,\n        destination=destination,\n        expire_at=expire_at,\n    )\n\n    logger.info(\n        f\"Created or updated a destination a lineage edge between \"\n        f\"{source_node_url} and {destination_node_url}\"\n    )\n\n    return job_timestamp\n</code></pre>"},{"location":"lineage/#prefect_monte_carlo.lineage.create_or_update_lineage_edge","title":"<code>create_or_update_lineage_edge</code>  <code>async</code>","text":"<p>Create or update a Monte Carlo lineage edge via the GraphQL API.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>MonteCarloLineageNode</code> <p>The source node of the lineage edge.</p> required <code>destination</code> <code>MonteCarloLineageNode</code> <p>The destination node of the lineage edge.</p> required <code>monte_carlo_credentials</code> <code>MonteCarloCredentials</code> <p>The Monte Carlo credentials block used to generate an authenticated GraphQL API client via pycarlo.</p> required <code>expire_at</code> <code>Optional[datetime]</code> <p>The time at which the lineage edge should expire. If not provided, the lineage edge will expire after 1 day.</p> <code>None</code> <p>Returns:</p> Type Description <code>int</code> <p>The timestamp of the job that created or updated the lineage edge.</p> Example <p>Create a lineage edge between a source table and a destination table: <pre><code>from prefect import flow\nfrom prefect_monte_carlo.credentials import MonteCarloCredentials\nfrom prefect_monte_carlo.lineage import (\n    create_or_update_lineage_edge, MonteCarloLineageNode\n)\n\nsource = MonteCarloLineageNode(\n    node_name=\"example_table_name\",\n    object_id=\"example_table_name\",\n    # \"table\" is recommended, but you can use any string, e.g. \"csv_file\"\n    object_type=\"table\",\n    resource_name=\"name_your_source_system\",\n    tags=[{\"propertyName\": \"key\", \"propertyValue\": \"value\"}]\n)\n\ndestination = MonteCarloLineageNode(\n    node_name=\"db_name:schema_name.table_name\",\n    object_id=\"db_name:schema_name.table_name\",\n    object_type=\"table\",\n    resource_name=\"your_dwh_resource_name\",\n    tags=[{\"propertyName\": \"key\", \"propertyValue\": \"value\"}]\n)\n\n@flow\ndef my_monte_carlo_flow():\n    create_or_update_lineage_edge(\n        source=source,\n        destination=destination,\n        monte_carlo_credentials=MonteCarloCredentials.load(\"my-mc-creds\"),\n        expire_at=datetime.now() + timedelta(days=10),\n    )\n</code></pre></p> Source code in <code>prefect_monte_carlo/lineage.py</code> <pre><code>@task(\n    retries=2,\n    retry_delay_seconds=3,\n    description=\"Create or update a Monte Carlo lineage edge via the GraphQL API.\",\n)\nasync def create_or_update_lineage_edge(\n    monte_carlo_credentials: MonteCarloCredentials,\n    source: MonteCarloLineageNode,\n    destination: MonteCarloLineageNode,\n    expire_at: Optional[datetime] = None,\n) -&gt; int:\n    \"\"\"Create or update a Monte Carlo lineage edge via the GraphQL API.\n\n    Args:\n        source: The source node of the lineage edge.\n        destination: The destination node of the lineage edge.\n        monte_carlo_credentials: The Monte Carlo credentials block used to generate\n            an authenticated GraphQL API client via pycarlo.\n        expire_at: The time at which the lineage edge should expire. If not provided,\n            the lineage edge will expire after 1 day.\n\n    Returns:\n        The timestamp of the job that created or updated the lineage edge.\n\n    Example:\n        Create a lineage edge between a source table and a destination table:\n        ```python\n        from prefect import flow\n        from prefect_monte_carlo.credentials import MonteCarloCredentials\n        from prefect_monte_carlo.lineage import (\n            create_or_update_lineage_edge, MonteCarloLineageNode\n        )\n\n        source = MonteCarloLineageNode(\n            node_name=\"example_table_name\",\n            object_id=\"example_table_name\",\n            # \"table\" is recommended, but you can use any string, e.g. \"csv_file\"\n            object_type=\"table\",\n            resource_name=\"name_your_source_system\",\n            tags=[{\"propertyName\": \"key\", \"propertyValue\": \"value\"}]\n        )\n\n        destination = MonteCarloLineageNode(\n            node_name=\"db_name:schema_name.table_name\",\n            object_id=\"db_name:schema_name.table_name\",\n            object_type=\"table\",\n            resource_name=\"your_dwh_resource_name\",\n            tags=[{\"propertyName\": \"key\", \"propertyValue\": \"value\"}]\n        )\n\n        @flow\n        def my_monte_carlo_flow():\n            create_or_update_lineage_edge(\n                source=source,\n                destination=destination,\n                monte_carlo_credentials=MonteCarloCredentials.load(\"my-mc-creds\"),\n                expire_at=datetime.now() + timedelta(days=10),\n            )\n        ```\n\n    \"\"\"\n    client = monte_carlo_credentials.get_client()\n\n    query = \"\"\"\n        mutation($destination_object_id: String!,\n        $destination_object_type: String!,\n        $destination_resource_name: String!,\n        $source_object_id: String!, $source_object_type: String!,\n            $source_resource_name: String!, $expire_at: DateTime) {\n            createOrUpdateLineageEdge(\n            destination: {\n                objectId: $destination_object_id\n                objectType: $destination_object_type\n                resourceName: $destination_resource_name\n            }\n            source: {\n                objectId: $source_object_id\n                objectType: $source_object_type\n                resourceName: $source_resource_name\n            }\n            expireAt: $expire_at\n            ){\n            edge{\n                jobTs\n            }\n            }\n        }\n        \"\"\"\n\n    variables = dict(\n        destination_object_id=destination.object_id,\n        destination_object_type=destination.object_type,\n        destination_resource_name=destination.resource_name,\n        source_object_id=source.object_id,\n        source_object_type=source.object_type,\n        source_resource_name=source.resource_name,\n        expire_at=expire_at.isoformat() if expire_at else None,\n    )\n\n    response = client(query=query, variables=variables)\n\n    job_timestamp = response[\"create_or_update_lineage_edge\"][\"edge\"][\"jobTs\"]\n\n    return job_timestamp\n</code></pre>"},{"location":"lineage/#prefect_monte_carlo.lineage.create_or_update_lineage_node","title":"<code>create_or_update_lineage_node</code>  <code>async</code>","text":"<p>Task for creating or updating a lineage node via the Monte Carlo GraphQL API.</p> <p>Parameters:</p> Name Type Description Default <code>monte_carlo_credentials</code> <code>MonteCarloCredentials</code> <p>The Monte Carlo credentials block used to generate.</p> required <code>node_name</code> <code>str</code> <p>The name of the lineage node.</p> required <code>object_id</code> <code>str</code> <p>The object ID of the lineage node.</p> required <code>object_type</code> <code>str</code> <p>The object type of the lineage node.</p> required <code>resource_name</code> <code>str</code> <p>The resource name of the lineage node.</p> required <code>tags</code> <code>Optional[List[Dict[str, str]]]</code> <p>A list of tags to apply to the lineage node.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>The MCON identifying the lineage node.</p> Example <p>Create or update a lineage node from a <code>MonteCarloLineageNode</code> object: <pre><code>from prefect import flow\nfrom prefect_monte_carlo.credentials import MonteCarloCredentials\nfrom prefect_monte_carlo.lineage import (\n    create_or_update_lineage_node, MonteCarloLineageNode\n)\n\nmc_node = MonteCarloLineageNode(\n    node_name=\"source_node\",\n    object_id=\"my_source_object_id\",\n    object_type=\"table\",\n    resource_name=\"my_source_resource_name\",\n    tags=[{\"propertyName\": \"tag_key\", \"propertyValue\": \"tag_value\"}],\n)\n\n@flow\ndef monte_carlo_lineage_flow():\n    node_mcon = create_or_update_lineage_node(\n        monte_carlo_credentials=MonteCarloCredentials.load(\"my-mc-creds\"),\n        **mc_node.dict(),\n</code></pre></p> Source code in <code>prefect_monte_carlo/lineage.py</code> <pre><code>@task(\n    retries=2,\n    retry_delay_seconds=3,\n    description=\"Create or update a Monte Carlo lineage node via the GraphQL API.\",\n)\nasync def create_or_update_lineage_node(\n    monte_carlo_credentials: MonteCarloCredentials,\n    node_name: str,\n    object_id: str,\n    object_type: str,\n    resource_name: str,\n    tags: Optional[List[Dict[str, str]]] = None,\n) -&gt; str:\n    \"\"\"Task for creating or updating a lineage node via the Monte Carlo GraphQL API.\n\n\n    Args:\n        monte_carlo_credentials: The Monte Carlo credentials block used to generate.\n        node_name: The name of the lineage node.\n        object_id: The object ID of the lineage node.\n        object_type: The object type of the lineage node.\n        resource_name: The resource name of the lineage node.\n        tags: A list of tags to apply to the lineage node.\n\n    Returns:\n        The MCON identifying the lineage node.\n\n    Example:\n        Create or update a lineage node from a `MonteCarloLineageNode` object:\n        ```python\n        from prefect import flow\n        from prefect_monte_carlo.credentials import MonteCarloCredentials\n        from prefect_monte_carlo.lineage import (\n            create_or_update_lineage_node, MonteCarloLineageNode\n        )\n\n        mc_node = MonteCarloLineageNode(\n            node_name=\"source_node\",\n            object_id=\"my_source_object_id\",\n            object_type=\"table\",\n            resource_name=\"my_source_resource_name\",\n            tags=[{\"propertyName\": \"tag_key\", \"propertyValue\": \"tag_value\"}],\n        )\n\n        @flow\n        def monte_carlo_lineage_flow():\n            node_mcon = create_or_update_lineage_node(\n                monte_carlo_credentials=MonteCarloCredentials.load(\"my-mc-creds\"),\n                **mc_node.dict(),\n\n        ```\n    \"\"\"\n    mc_client = monte_carlo_credentials.get_client()\n\n    response = mc_client(\n        query=\"\"\"\n        mutation($node_name: String!, $object_id: String!, $object_type: String!,\n        $resource_name: String!, $tags: [ObjectPropertyInput]\n        ) {\n            createOrUpdateLineageNode(\n            name: $node_name,\n            objectId: $object_id,\n            objectType: $object_type,\n            resourceName: $resource_name,\n            properties: $tags\n            ){\n                node{\n                    mcon\n                }\n            }\n        }\n        \"\"\",\n        variables=dict(\n            node_name=node_name,\n            object_id=object_id,\n            object_type=object_type,\n            resource_name=resource_name,\n            tags=tags,\n        ),\n    )\n    mcon_string = response[\"create_or_update_lineage_node\"][\"node\"][\"mcon\"]\n    return mcon_string\n</code></pre>"},{"location":"resources/","title":"Resources","text":""},{"location":"resources/#prefect_monte_carlo.resources","title":"<code>prefect_monte_carlo.resources</code>","text":"<p>Module defining tasks for interacting with Monte Carlo resources.</p>"},{"location":"resources/#prefect_monte_carlo.resources-classes","title":"Classes","text":""},{"location":"resources/#prefect_monte_carlo.resources-functions","title":"Functions","text":""},{"location":"resources/#prefect_monte_carlo.resources.get_monte_carlo_resources","title":"<code>get_monte_carlo_resources</code>  <code>async</code>","text":"<p>Task to retrieve aggregate Monte Carlo resource information via the <code>getResources</code> GraphQL query. Fields selected by this query include: <code>name</code>, <code>type</code>, <code>id</code>, <code>uuid</code>, <code>isDefault</code>, and <code>isUserProvided</code>.</p> <p>Parameters:</p> Name Type Description Default <code>monte_carlo_credentials</code> <code>MonteCarloCredentials</code> <p>The Monte Carlo credentials block used to generate an authenticated GraphQL API client via pycarlo.</p> required Source code in <code>prefect_monte_carlo/resources.py</code> <pre><code>@task\nasync def get_monte_carlo_resources(\n    monte_carlo_credentials: MonteCarloCredentials,\n) -&gt; box.BoxList:\n    \"\"\"\n    Task to retrieve aggregate Monte Carlo resource information via the `getResources`\n    GraphQL query. Fields selected by this query include: `name`, `type`, `id`, `uuid`,\n    `isDefault`, and `isUserProvided`.\n\n    Args:\n        monte_carlo_credentials: The Monte Carlo credentials block used to generate\n            an authenticated GraphQL API client via pycarlo.\n    Returns:\n        A `box.BoxList` of Monte Carlo resources.\n    \"\"\"\n\n    client = monte_carlo_credentials.get_client()\n    query = \"\"\"\n        query {\n            getResources {\n                name\n                type\n                id\n                uuid\n                isDefault\n                isUserProvided\n            }\n        }\n    \"\"\"\n    return client(query)\n</code></pre>"},{"location":"utilities/","title":"Utilities","text":""},{"location":"utilities/#prefect_monte_carlo.utilities","title":"<code>prefect_monte_carlo.utilities</code>","text":"<p>Module to define Monte Carlo utility functions.</p>"},{"location":"utilities/#prefect_monte_carlo.utilities-classes","title":"Classes","text":""},{"location":"utilities/#prefect_monte_carlo.utilities-functions","title":"Functions","text":""},{"location":"utilities/#prefect_monte_carlo.utilities.rule_uuid_from_name","title":"<code>rule_uuid_from_name</code>  <code>async</code>","text":"<p>Get the UUID of a Monte Carlo monitor rule from its name.</p> <p>Parameters:</p> Name Type Description Default <code>rule_name</code> <code>str</code> <p>Name of the Monte Carlo monitor rule.</p> required <code>monte_carlo_credentials</code> <code>MonteCarloCredentials</code> <p>Credentials to authenticate with the Monte Carlo GraphQL API.</p> required Source code in <code>prefect_monte_carlo/utilities.py</code> <pre><code>async def rule_uuid_from_name(\n    rule_name: str,\n    monte_carlo_credentials: MonteCarloCredentials,\n) -&gt; UUID:\n    \"\"\"Get the UUID of a Monte Carlo monitor rule from its name.\n\n\n    Args:\n        rule_name: Name of the Monte Carlo monitor rule.\n        monte_carlo_credentials: Credentials\n            to authenticate with the Monte Carlo GraphQL API.\n    \"\"\"\n    query = f\"\"\"\n        query {{\n            getCustomRule (\n                descriptionContains: \"{rule_name}\"\n        ) {{ uuid }}\n    }}\n    \"\"\"\n    client = monte_carlo_credentials.get_client()\n    return client(query).get_custom_rule.uuid\n</code></pre>"},{"location":"utilities/#prefect_monte_carlo.utilities.validate_tags","title":"<code>validate_tags</code>","text":"<p>Validate that Monte Carlo lineage node tags are in the correct format.</p> <p>Parameters:</p> Name Type Description Default <code>tags</code> <code>List[Dict[str, str]]</code> <p>List of user-defined tags to validate.</p> required <p>Raises:</p> Type Description <code>MonteCarloIncorrectTagsFormatException</code> <p>If the tags are not well-formatted.</p> Source code in <code>prefect_monte_carlo/utilities.py</code> <pre><code>def validate_tags(tags: List[Dict[str, str]]):\n    \"\"\"Validate that Monte Carlo lineage node tags are in the correct format.\n\n    Args:\n        tags: List of user-defined tags to validate.\n\n    Raises:\n        MonteCarloIncorrectTagsFormatException: If the tags are not well-formatted.\n\n    \"\"\"\n    for tag in tags:\n        if tag.keys() != {\"propertyName\", \"propertyValue\"}:\n            raise MonteCarloIncorrectTagsFormatException(\n                \"Must provide tags as a list of dicts like \"\n                '[{\"propertyName\": \"tag_name\", \"propertyValue\": \"tag_value\"}].',\n                \"You provided: \",\n                tag,\n            )\n</code></pre>"}]}